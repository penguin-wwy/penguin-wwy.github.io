<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>solidity中的SMT（1）</title>
    <link href="/2022/06/13/smt-in-solidity1/"/>
    <url>/2022/06/13/smt-in-solidity1/</url>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Solidity实现了一种基于SMT（<strong>Satisfiability Modulo Theories</strong>）和Horn逻辑的形式化验证方法。<code>SMTChecker</code>模块自动尝试证明代码满足require和assert语句所给出的规范。也就是说，它将require语句视为某种假设，并试图证明assert语句中的条件始终为真。如果发现断言失败，可能会给用户一个反例，说明断言是如何被违反的。如果<code>SMTChecker</code>对一个属性没有给出警告，这意味着该属性是可满足的。</p><p>如此，solidity便可以在compile time进行下列属性的检查：</p><ul><li>Arithmetic underflow and overflow.</li><li>Division by zero.</li><li>Trivial conditions and unreachable code.</li><li>Popping an empty array.</li><li>Out of bounds index access.</li><li>Insufficient funds for a transfer.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>例如对于如下代码</p><div class="code-wrapper"><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: GPL-3.0</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">>=</span><span class="token version number">0.8.4</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Overflow</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> immutable x<span class="token punctuation">;</span>    <span class="token builtin">uint</span> immutable y<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token builtin">uint</span> x_<span class="token punctuation">,</span> <span class="token builtin">uint</span> y_<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x_ <span class="token operator">+</span> y_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">uint</span> x_<span class="token punctuation">,</span> <span class="token builtin">uint</span> y_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x_<span class="token punctuation">,</span> y_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">stateAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>我们希望在编译阶段可以发现潜在的<code>overflow</code>问题，就是<code>add</code>函数中的两个<code>uint</code>类型相加，可能导致的溢出。</p><p>使用方法：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">solc --model-checker-engine <span class="token string">"all"</span> --model-checker-targets <span class="token string">"underflow,overflow"</span> overflow.sol<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>其中</p><p><code>model-checker-engine</code>指定了分析所使用的引擎，<code>model-checker-targets</code>指定使用的checker。执行的输出如下：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Warning: This is a pre-release compiler version, please <span class="token keyword">do</span> not use it <span class="token keyword">in</span> production.Warning: CHC: Overflow <span class="token punctuation">(</span>resulting value larger than <span class="token number">2</span>**256 - <span class="token number">1</span><span class="token punctuation">)</span> happens here.Counterexample:x <span class="token operator">=</span> <span class="token number">115792089237316195423570985008687907853269984665640564039457584007913129639935</span>, y <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span>Transaction trace:Overflow.constructor<span class="token punctuation">(</span><span class="token number">115792089237316195423570985008687907853269984665640564039457584007913129639935</span>, <span class="token number">1</span><span class="token punctuation">)</span>State: x <span class="token operator">=</span> <span class="token number">115792089237316195423570985008687907853269984665640564039457584007913129639935</span>, y <span class="token operator">=</span> <span class="token number">1</span>Overflow.stateAdd<span class="token punctuation">(</span><span class="token punctuation">)</span>    Overflow.add<span class="token punctuation">(</span><span class="token number">115792089237316195423570985008687907853269984665640564039457584007913129639935</span>, <span class="token number">1</span><span class="token punctuation">)</span> -- internal call  --<span class="token operator">></span> overflow.sol:10:16:   <span class="token operator">|</span><span class="token number">10</span> <span class="token operator">|</span>         <span class="token builtin class-name">return</span> x_ + y_<span class="token punctuation">;</span>   <span class="token operator">|</span>                ^^^^^^^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Model-Checking-Engines"><a href="#Model-Checking-Engines" class="headerlink" title="Model Checking Engines"></a>Model Checking Engines</h3><p>Solidity目前实现有两种check engine。</p><ul><li>Bounded Model Checker (BMC)</li><li>Constrained Horn Clauses (CHC)</li></ul><h4 id="BMC"><a href="#BMC" class="headerlink" title="BMC"></a>BMC</h4><p>BMC位于<code>libsolidity/formal/BMC.h</code>，是一种针对过程内的分析，也就是忽略函数调用带来的影响。循环也同样会被忽略。对于<code>internal function</code>如果没有递归那么则会做<code>inline</code>的分析。<code>extern call</code>在可能的情况下也会实现<code>inline</code>。总是，它是一种以轻量、快速为目标的引擎。</p><h3 id="CHC"><a href="#CHC" class="headerlink" title="CHC"></a>CHC</h3><p>CHC位于<code>libsolidity/formal/CHC.h</code>。通过将合约的CFG建模为一个<code>Horn clauses</code>，实现分析。这样每个函数在被分析的时候都会考虑到在非限制情况下的side-effect（包括循环）。</p><p>CHC的分析能力比BMC强大许多，代价是更多的资源消耗。</p><p>一个直观的例子，对于上文的例子分别使用两种引擎并通过<code>perf</code>进行采样。</p><p>CHC stat：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">       <span class="token number">270.61</span> msec task-clock:u              <span class="token comment">#    0.997 CPUs utilized          </span>            <span class="token number">0</span>      context-switches:u        <span class="token comment">#    0.000 /sec                   </span>            <span class="token number">0</span>      cpu-migrations:u          <span class="token comment">#    0.000 /sec                   </span>       <span class="token number">18,773</span>      page-faults:u             <span class="token comment">#   69.374 K/sec                  </span>  <span class="token number">855,936</span>,173      cycles:u                  <span class="token comment">#    3.163 GHz                    </span>   <span class="token number">55,947</span>,528      stalled-cycles-frontend:u <span class="token comment">#    6.54% frontend cycles idle   </span>  <span class="token number">133,702</span>,666      stalled-cycles-backend:u  <span class="token comment">#   15.62% backend cycles idle    </span><span class="token number">1,102</span>,148,341      instructions:u            <span class="token comment">#    1.29  insn per cycle         </span>                                             <span class="token comment">#    0.12  stalled cycles per insn</span>  <span class="token number">225,395</span>,044      branches:u                <span class="token comment">#  832.924 M/sec                  </span>    <span class="token number">6,859</span>,913      branch-misses:u           <span class="token comment">#    3.04% of all branches        </span>  <span class="token number">0.271336637</span> seconds <span class="token function">time</span> elapsed  <span class="token number">0.243750000</span> seconds user  <span class="token number">0.026701000</span> seconds sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>BMC stat：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">      36.98 msec task-clock:u              #    0.984 CPUs utilized                    0      context-switches:u        #    0.000 &#x2F;sec                             0      cpu-migrations:u          #    0.000 &#x2F;sec                         5,585      page-faults:u             #  151.010 K&#x2F;sec                   95,168,344      cycles:u                  #    2.573 GHz                      5,230,800      stalled-cycles-frontend:u #    5.50% frontend cycles idle    16,163,554      stalled-cycles-backend:u  #   16.98% backend cycles idle    129,053,280      instructions:u            #    1.36  insn per cycle                                                    #    0.13  stalled cycles per insn 22,862,839      branches:u                #  618.177 M&#x2F;sec                      583,533      branch-misses:u           #    2.55% of all branches        0.037567873 seconds time elapsed0.027219000 seconds user0.010202000 seconds sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>前者几乎高出一个数量级，而如果代码越复杂，可以遇见性能差距就会越大。</p><h3 id="Verfication-Targets"><a href="#Verfication-Targets" class="headerlink" title="Verfication Targets"></a>Verfication Targets</h3><p>当前已有的形式化规则：</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">enum class VerificationTargetType &#123;     ConstantCondition,    Underflow,    Overflow,    UnderOverflow,    DivByZero,    Balance,    Assert,    PopEmptyArray,    OutOfBounds &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Custom-Annotation"><a href="#Custom-Annotation" class="headerlink" title="Custom Annotation"></a>Custom Annotation</h3><p>Solidity可以通过特定格式的注释标记函数的semantics，来提高SMT的分析效率（当然也可以用来降低准确性）。举例来说：</p><div class="code-wrapper"><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">SMTAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/// @custom:smtchecker abstract-function-nondet</span>    <span class="token keyword">function</span> <span class="token function">no_effect</span><span class="token punctuation">(</span><span class="token builtin">uint</span> y_<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> y_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">test_abstract</span><span class="token punctuation">(</span><span class="token builtin">uint</span> x_<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> y_ <span class="token operator">=</span> <span class="token function">no_effect</span><span class="token punctuation">(</span>x_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span>y_ <span class="token operator">==</span> x_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>正常情况下<code>CHC</code>是完全可以分析出<code>no_effect</code>的作用，对于表达式<code>assert(y_ == x_);</code>的结果为SAT。但是如果我们添加上一个<code>abstract-function-nondet</code>的annotation，那么<code>no_effect</code>就不会被SMT所使用，并且该annotation表代表的语义是返回一个<code>nondeterministic value</code>并且保持状态不变（即<code>view</code>或者<code>pure</code>语义），那么此时<code>CHC</code>就会给出警告。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Warning: CHC: Assertion violation happens here.Counterexample:x_ <span class="token operator">=</span> <span class="token number">0</span>y_ <span class="token operator">=</span> <span class="token number">1</span>Transaction trace:SMTAnnotation.constructor<span class="token punctuation">(</span><span class="token punctuation">)</span>SMTAnnotation.test_abstract<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    SMTAnnotation.plus_one<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> -- internal call  --<span class="token operator">></span> overflow.sol:36:9:   <span class="token operator">|</span><span class="token number">36</span> <span class="token operator">|</span>         assert<span class="token punctuation">(</span>y_ <span class="token operator">==</span> x_<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">|</span>         ^^^^^^^^^^^^^^^^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>程序语言</category>
      
      <category>形式化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SMT</tag>
      
      <tag>formula</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Runtime feedback in a meta-tracing JIT for efficient dynamic languages</title>
    <link href="/2022/02/28/runtime-feedback-meta-tracing-jit/"/>
    <url>/2022/02/28/runtime-feedback-meta-tracing-jit/</url>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>对于面向对象的动态语言，最困难的部分之一就是优化其对象模型。Meta-Tracing JIT为实现动态语言的语言解释器提供Tracing JIT，而不是为动态语言本身提供跟踪JIT，这使得对象模型对于跟踪器及其优化是透明的，动态语言的语义不必在JIT中复制实现。同时，允许在动态语言实现中使用一些注解来指导Meta-Tracing，该过程不是完全自动的，但可以有很好的加速效果。这篇主要就是说明两个在PyPy项目中广泛使用的注解，以改进Python解释器的性能，特别是对象模型的性能。</p><p>核心思路就是对于变化非常慢的值（读多写少），使用动态编译可以在运行时观察到的具体值并利用它们。具体地说，如果存在，则可以编译同一代码的多个专用版本，每个实际值对应一个版本。</p><ul><li>A hint to turn arbitrary variables into constants in the trace byfeeding back runtime information into compilation.</li><li>A way to annotate operations which the constant folding opti-mization then recognizes and exploits.</li><li>A worked-out example of a simple object model of a dynamiclanguage and how it can be improved using these hints.</li><li>This example also exemplifies general techniques for refactor-ing code to expose constant folding opportunities of likely run-time constants.</li></ul><h3 id="Hints-for-Controlling-Optimization"><a href="#Hints-for-Controlling-Optimization" class="headerlink" title="Hints for Controlling Optimization"></a>Hints for Controlling Optimization</h3><p>本文的核心介绍两种提示（<code>hint</code>），用于加速执行。如果应用得当，这些技术可以通过预计算部分运行时发生的事情来实现真正的加速，否则会陷入<code>slow path</code>，带来更高的成本。</p><h4 id="Constant-fold"><a href="#Constant-fold" class="headerlink" title="Constant fold"></a>Constant fold</h4><p>一种是针对变量的<code>promotion</code>行为，用于在范围更广的代码路径上进行常量折叠的优化。</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>z <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">return</span> z <span class="token operator">+</span> y<span class="token comment"># trace code</span><span class="token triple-quoted-string string">"""v1 = x1 * 2z1 = v1 + 1v2 = z1 + y1return(v2)"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>如果通过观察发现入参<code>x</code>总是很少变化，我们可以添加一个提示来提升x</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>promote<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>z <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">return</span> z <span class="token operator">+</span> y<span class="token comment"># trace code</span><span class="token triple-quoted-string string">"""guard(x1 == 4)v1 = x1 * 2z1 = v1 + 1v2 = z1 + y1return(v2)"""</span><span class="token comment"># optimized code</span><span class="token triple-quoted-string string">"""guard(x1 == 4)v2 = 9 + y1return(v2)"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这里需要<code>guard</code>的执行代价低于被折叠的算术操作的代价。</p><h4 id="Operation-Fold"><a href="#Operation-Fold" class="headerlink" title="Operation Fold"></a>Operation Fold</h4><p>跟Constant Fold类似，Operation同样可以被折叠，这种被称为<code>trace-elidable</code>，如果调用的函数满足<code>trace-elidable</code>（某些paper里也叫<code>elidable function</code>），意味着使用相同参数对函数的连续调用总是返回相同的结果，并且函数功能无副作用或幂等作用。根据此定义，对该函数的调用可以直接替换成调用结果。</p><p>举例来讲</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>x <span class="token operator">=</span> x    self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>    promote<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>y <span class="token operator">=</span> self<span class="token punctuation">.</span>c<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val      <span class="token decorator annotation punctuation">@elidable</span>  <span class="token keyword">def</span> <span class="token function">c</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    promote<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment"># promotion &#123;self: 0xb73984a8&#125;</span><span class="token triple-quoted-string string">"""guard(a1 == 0xb73984a8)v1 = A.c(a1)v2 = v1 + val1a1.y = v2"""</span><span class="token comment"># promotion &#123;self: 0xb73984a8, self.x: 4&#125;</span><span class="token triple-quoted-string string">"""guard(a1 == 0xb73984a8)v2 = 9 + val1a1.y = v2"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>首先<code>promote</code>的是self，为了保证函数<code>f</code>中的调用<code>self.c</code>就是下面声明的版本，进而继续假设访问的<code>self.x</code>的值为4，如此就可以将<code>self.c()</code>的函数调用折叠。</p><h4 id="Together"><a href="#Together" class="headerlink" title="Together"></a>Together</h4><h4 id="Making-Instance-Attributes-Faster"><a href="#Making-Instance-Attributes-Faster" class="headerlink" title="Making Instance Attributes Faster"></a>Making Instance Attributes Faster</h4><p>将上述两种优化一起使用时，最直观的好处就是可以加快对于attribute的访问。</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>__class__ <span class="token operator">=</span> cls    self<span class="token punctuation">.</span>attrs <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token boolean">None</span> <span class="token punctuation">]</span> <span class="token operator">*</span> cls<span class="token punctuation">.</span>attr_size<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> attr_name <span class="token keyword">in</span> cls<span class="token punctuation">.</span>attr_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      attr_hash <span class="token operator">=</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>attr_name<span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      index <span class="token operator">=</span> attr_hash <span class="token operator">%</span> cls<span class="token punctuation">.</span>attr_size<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>          self<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>attr_name<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>          attr_hash <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">get_attr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    attr_hash <span class="token operator">=</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      index <span class="token operator">=</span> attr_hash <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> name<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        attr_hash <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>以上述为例，采用dict的方式实现一个Instance，那么对于一个指定的实例，并且<code>self.attrs</code>的容量没有变化的情况下（变化的情况是有额外的，没有在class中声明的属性产生），它的每个属性的在<code>self.attrs</code>中的下标应该是保持不变的。这意味着，如果<code>self</code>相同，可以使用直接的下标来访问属性。</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> inst<span class="token punctuation">.</span>get_attr<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment"># trace code: promotion &#123;index_of_a : 0&#125;</span><span class="token triple-quoted-string string">"""guard(inst1 == 0xb73984a8)a1 = inst1.attrs[0][1]"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="Versioning-of-Classes"><a href="#Versioning-of-Classes" class="headerlink" title="Versioning of Classes"></a>Versioning of Classes</h4><p>除了属性意外，我们更希望的是Class.find_method方法是可折叠的。但这不可能，因为更改类本身总是有可能的。每次类更改时，find_method都可能返回一个新值。因此，我们为每个类提供一个Version对象，每当类发生变化（即方法字典变化）时，该对象就会改变。这意味着对于给定的（名称、版本）对，调用Methods.get()的结果总是相同的。</p><h3 id="Real-World-Considerations"><a href="#Real-World-Considerations" class="headerlink" title="Real-World Considerations"></a>Real-World Considerations</h3><p>现实世界中，由于Python的object模型要复杂得多，因此需要做一些额外的工作。</p><p>需要解决的第一个问题是Python支持(多)继承。因此，在类中查找方法需要考虑整个方法解析顺序中的所有类。这使得类的版本控制更加复杂。如果更改了类，则其版本也会更改。同时，从它继承的所有类的版本也需要递归更改。这使得变更代价高昂，但它们应该是罕见的。另一方面，复杂类层次结构中的方法查找与上面的简单对象模型中一样，可以进行优化。</p><p>另一个优化是，在实践中，实例的形状与其类相关。在PyPy的Python解释器中，我们将实例存储在对应的类上，这可以有效减少trace过程中的guard。</p>]]></content>
    
    
    <categories>
      
      <category>paper阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimization</tag>
      
      <tag>compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Impact of Meta-Tracing on VM Design and Implementation</title>
    <link href="/2022/02/24/impact-of-meta-tracing/"/>
    <url>/2022/02/24/impact-of-meta-tracing/</url>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>这篇主要介绍Meta-Level tracing（其实就是PyPy）所实现的一些优化设计（找个了Converge来对比，但是不太熟，就跳过不看了）。前面对于Meta-Tracing的介绍没啥好看的。有一句总结性的描述：</p><blockquote><p>The fundamental difference between meta-tracing and non-meta-tracingJITs is that the latter JIT must be manually written. By tracing the actionsthe interpreter itself takes, a meta-tracing JIT can automatically create aJIT from the interpreter.</p></blockquote><p>这也符合PyPy自身设计的初衷。</p><h3 id="Optimising-an-RPython-VM"><a href="#Optimising-an-RPython-VM" class="headerlink" title="Optimising an RPython VM"></a>Optimising an RPython VM</h3><p>接下来是正题，一些优化上的设计。</p><h4 id="General-RPython-JIT-optimisation-techniques"><a href="#General-RPython-JIT-optimisation-techniques" class="headerlink" title="General RPython JIT optimisation techniques"></a>General RPython JIT optimisation techniques</h4><p>一些通用的优化技术。</p><p><em>promoting values</em>：来自于<strong>Partial Evaluation</strong>中的promotion。</p><p><em>Elidable functions</em>：简单来说就是相同输入会获得相同输出的函数，但是与<strong>pure function</strong>并不想等。</p><p><em>Using trace optimiser friendly code</em>：某些代码并不适合trace优化，比如list的append操作，如果是变长的情况下，每次都需要去检查是否有足够的长度继续指向append操作，这无疑会提高<strong>deopt</strong>的概率。最简单的处理办法比如使用定长的数据结构来代替它，或者对于不需要随机访问的情况下用linked list代替。</p><h4 id="Optimising-Instances"><a href="#Optimising-Instances" class="headerlink" title="Optimising Instances"></a>Optimising Instances</h4><p>对于PyPy这样的语言VM来说，最重要的优化无疑是对<code>object model</code>的优化（包括instance、class、module）。</p><p>对于Python这样的语言来说，本质上，instance的行为类似于将槽名称(作为字符串)映射到值的字典，而class定义了实例之间的共享行为（反过来说，与其他OO语言不同的是class并不能决定每个instance的<strong>shape</strong>）。语言的行为更接近<strong>prototype-basedlanguages</strong>，比如Self。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/image-20220224000359923.png"></p><p>尽管class并不能约束每个instance的形状，但是在实践中，他们之间不一致的情况是少数。所以通过立即访问来代替字符串映射来提升访问速度，这一做法任然是可行的。例如上图，可以通过固定slot的方式，将<code>a.x</code>的访问优化成<code>a.slot[0]</code>。</p><p>此外，非正式研究表明，大多数instance的属性访问，集中在5个甚至更少。因此PyPy为5个插槽预分配空间，使其在大多数情况下无需分配任意大小的列表来存储插槽，当超出5个的时候再分配额外的变长插槽，如下图所示：</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/image-20220224012220403.png"></p><p>Python中的instance可以通过<code>__dict__</code>来访问全部properties。但是这样的语法会导致两个问题：一是字典是一个复杂的数据结构，需要额外的内存代价；</p><p>二是这会破坏很多优化的机会，比如上面的立即访问操作。因此，正常情况下PyPy任然使用列表的方式实现属性的立即访问，但是维护一个<code>fake dict</code>，当一个instance调用<code>__dict__</code>的时候，就会将属性使用字典重排。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/image-20220224012710797.png"></p><p>这也体现了，随着更罕见、更动态的特性的使用，解释器是如何逐渐降低性能的。</p><h4 id="Optimising-Classes"><a href="#Optimising-Classes" class="headerlink" title="Optimising Classes"></a>Optimising Classes</h4><p>对于class的优化的关注点则变成了如何降低反射调用method上。不过对于method的查找需要考虑继承关系，所以代价更加昂贵。</p><p>这里使用的优化方式叫类的版本化。对于一个特定版本的类，它对于某个字段的访问应该是一致的，那么查找只需要进行一次。这种技术使得在普通情况下在类中查找字段非常快速(在速度上与C++方法调用相当)。JIT将字段查找优化为单个保护，它只需要检查一个类版本；如果检查成功，则正确的结果已经知道并插入。</p><p>然而，如上所述，当类的字段频繁变化时（会导致版本频繁变化），性能将受到影响。例如有一个class field用于记录当前发生多少次实例化：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span>  counter <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    C<span class="token punctuation">.</span>counter <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># class version ++</span>     <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 修改导致class版本变化</span>a1 <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>PyPy在上面增加了一层额外的间接级别：类不再直接存储该字段的值，而是存储对包含该值的Cell。当随后更改该特定字段时，只会更改该Cell的内容，而不会更改整个类：因此不需要更改类的版本。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/image-20220224020022268.png"></p><h4 id="Optimising-Modules"><a href="#Optimising-Modules" class="headerlink" title="Optimising Modules"></a>Optimising Modules</h4><p>Module的优化基本跟class相同。</p><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><p>这些优化例证了RPython VM需要考虑哪些使用模式是最频繁的。然后，按照这种使用方式修改解释器和数据结构，以便与JIT一起生成代码少、保护少的机器代码。所以在演进过程中部分解释器的手动重写是必要的，许多优化依赖于对解释器实现的语言的深入了解。</p><p>同时必须对真正的程序进行分析，以确定需要关注哪些案例。不同的基准(合成的或非合成的)可以在很大程度上改变对最重要使用场景的看法，必须谨慎选择。</p>]]></content>
    
    
    <categories>
      
      <category>paper阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimization</tag>
      
      <tag>compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tracing the meta-level:\ PyPy&#39;s tracing JIT compiler</title>
    <link href="/2022/02/20/meta-level-tracing/"/>
    <url>/2022/02/20/meta-level-tracing/</url>
    
    <content type="html"><![CDATA[<h3 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h3><p>PyPy Meta-Tracing JIT的一个目标是简化动态语言高性能实现的方法。</p><p>PyPy项目一直以——总体上简化动态语言实现方法——为目标。它一开始是用RPython实现Python解释器，之后对实现其他动态语言也很有用。一般的方法是在Python的一个子集上实现一个语言解释器，这个子集可以被编译成各种目标环境，如ASC/POSIX、CLI或JVM。</p><p>许多动态语言使用字节码解释器，但是却没有更高级的即时编译技术。造成这种情况的原因有很多，其中大部分归结为使用编译的固有复杂性。解释器易于实现、理解、扩展和移植，而编写即时编译器是一项容易出错的任务，语言的动态特性使其更加困难。</p><p>编写基于Trace的JIT编译器则相对简单。它可以被添加到一种语言的现有解释器中，解释器接管了编译器的一些功能，机器代码生成部分可以得到简化。</p><p>在本文中，讨论了PyPy项目借助PyPy工具链提升的解释器性能的工作，也就是JIT。</p><p>与当前存在的动态语言Tracing JIT不同，PyPy所Trace的是“下一级”，即它跟踪解释器的执行，而不是用户程序的执行。</p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/image-20220222013439948.png"  /><p>本文的核心贡献有两点：</p><ul><li>Applying a tracing JIT compiler to an interpreter.</li><li>Finding techniques for improving the generated code.</li></ul><h3 id="Tracing-JIT"><a href="#Tracing-JIT" class="headerlink" title="Tracing JIT"></a>Tracing JIT</h3><p>首先考察一下Tracing JIT的相关内容。</p><p>对于动态语言的性能提升，tracing JIT是一个很不错的思路，它基于以下两个基本假设：</p><ul><li>programs spend most of their runtime in loops</li><li>several iterations of the same loop are likely to takesimilar code paths</li></ul><p>Trace JIT基于解释器在执行过程中通过轻量级的profiling，定位到用户代码的热路径（比如循环），解释器进入<code>trace mode</code>，在该模式下会跟踪记录足够的执行信息。这些跟踪获得的信息会用于生成高性能的机器代码，在下一次进入热路径的时候执行。</p><p>这种跟踪是连续的，它只表示代码的许多可能路径中的一条。为了确保正确性，路径其他方向上都包含一个保护（guard），例如在条件和间接或虚拟调用时。在生成机器代码时，每个<strong>guard</strong>都被转换某种快速检查，以保证我们正在执行的路径仍然有效，如果检查失败，会立即退出机器代码，并通过回退到解释来继续执行（Deoptimize）。</p><p>最重要的点在于解释器如何识别loop，即跟踪器如何识别它到目前为止记录的轨迹对应于一个循环。</p><p>这依赖于某种<strong>position key</strong>：如果该位置处之前已经被执行过一次。跟踪器不需要一直检查是否是<strong>position key</strong>，而只需要后向跳转时检查是否已经途径过该点（例如，反向分支指令）。注意，在正常解释执行期间，它们是执行剖析的地方（定位循环）；在跟踪期间，它们是执行闭合循环检查的地方。</p><h3 id="Applying-a-Tracing-JIT-to-an-Interpreter"><a href="#Applying-a-Tracing-JIT-to-an-Interpreter" class="headerlink" title="Applying a Tracing JIT to an Interpreter"></a>Applying a Tracing JIT to an Interpreter</h3><h4 id="Unrolling-the-bytecode-dispatch-loop"><a href="#Unrolling-the-bytecode-dispatch-loop" class="headerlink" title="Unrolling the bytecode dispatch loop"></a>Unrolling the bytecode dispatch loop</h4><p>在简单了解Tracing JIT之后，考察PyPy所实现的Meta-level tracing JIT。</p><p>如前所述，PyPy跟踪的内容并不是用户程序执行的过程，而是解释器的执行过程（Meta-Level）。</p><p>对解释器而言，最重要的热循环是字节码分派循环(对于许多简单的解释器来说，它也是唯一的热循环)。此循环的一次迭代对应于一个操作码的执行。</p><p>这意味着Tracing JIT所做的假设之一是错误的——热循环的几次迭代并不能保证相似的代码路径。</p><p>为了优化这种情况，JIT就不能以单一执行的分派过程作为基准开始优化，它需要跟踪多条opcode的执行情况，这本质上类似于<strong>unrolling the bytecode dispatch loop</strong>。</p><p>理想情况下，字节码分派循环应该完全展开，并从中可以找到相对应的用户代码循环（当语言解释器的程序计数器几次具有相同的值时，就会出现用户循环）。和语言解释器类似，跟踪器，程序计数器出现相同的情况，意味着发现一个闭合的循环。不过对于跟踪器来说，这需要解释器协助完成。</p><p>这里对于language-interpreter的trace在概念上是由tracing interpreter完成的（因为RPython也是一种运行在解释器上的解释型语言，所以它的trace工作可以由本身的解释器替代），这里就形成了所谓的双解释器结构。</p><h4 id="Improving-the-Result"><a href="#Improving-the-Result" class="headerlink" title="Improving the Result"></a>Improving the Result</h4><p>之后便是对展开之后的执行序列进行优化，不过这篇论文里优化内容讲的并不多，简单提了下类似常量折叠之类的。</p><p>有个例子简单演示一下全过程。</p><p>首先是解释器代码：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">interpret</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>    regs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">256</span>    pc <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        opcode <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">[</span>pc<span class="token punctuation">]</span><span class="token punctuation">)</span>        pc <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> opcode <span class="token operator">==</span> JUMP_IF_A<span class="token punctuation">:</span>            target <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">[</span>pc<span class="token punctuation">]</span><span class="token punctuation">)</span>            pc <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> a<span class="token punctuation">:</span>                pc <span class="token operator">=</span> target        <span class="token keyword">elif</span> opcode <span class="token operator">==</span> MOV_A_R<span class="token punctuation">:</span>            n <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">[</span>pc<span class="token punctuation">]</span><span class="token punctuation">)</span>            pc <span class="token operator">+=</span> <span class="token number">1</span>            regs<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> a        <span class="token keyword">elif</span> opcode <span class="token operator">==</span> MOV_R_A<span class="token punctuation">:</span>            n <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">[</span>pc<span class="token punctuation">]</span><span class="token punctuation">)</span>            pc <span class="token operator">+=</span> <span class="token number">1</span>            a <span class="token operator">=</span> regs<span class="token punctuation">[</span>n<span class="token punctuation">]</span>        <span class="token keyword">elif</span> opcode <span class="token operator">==</span> ADD_R_TO_A<span class="token punctuation">:</span>            n <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>bytecode<span class="token punctuation">[</span>pc<span class="token punctuation">]</span><span class="token punctuation">)</span>            pc <span class="token operator">+=</span> <span class="token number">1</span>            a <span class="token operator">+=</span> regs<span class="token punctuation">[</span>n<span class="token punctuation">]</span>        <span class="token keyword">elif</span> opcode <span class="token operator">==</span> DECR_A<span class="token punctuation">:</span>            a <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> opcode <span class="token operator">==</span> RETURN_A<span class="token punctuation">:</span>            <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输入程序：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">MOV_A_R 0 # i &#x3D; aMOV_A_R 1 # copy of &#39;a&#39;# 4:MOV_R_A 0 # i--DECR_AMOV_A_R 0MOV_R_A 2 # res +&#x3D; aADD_R_TO_A 1MOV_A_R 2MOV_R_A 0 # if i!&#x3D;0: goto 4JUMP_IF_A 4MOV_R_A 2 # return resRETURN_A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>跟踪生成的执行序列：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">loop_start(a0, regs0, bytecode0, pc0)# MOV_R_A 0opcode0 &#x3D; strgetitem(bytecode0, pc0)pc1 &#x3D; int_add(pc0, Const(1))guard_value(opcode0, Const(2))n1 &#x3D; strgetitem(bytecode0, pc1)pc2 &#x3D; int_add(pc1, Const(1))a1 &#x3D; list_getitem(regs0, n1)# DECR_Aopcode1 &#x3D; strgetitem(bytecode0, pc2)pc3 &#x3D; int_add(pc2, Const(1))guard_value(opcode1, Const(7))a2 &#x3D; int_sub(a1, Const(1))# MOV_A_R 0opcode1 &#x3D; strgetitem(bytecode0, pc3)pc4 &#x3D; int_add(pc3, Const(1))guard_value(opcode1, Const(1))n2 &#x3D; strgetitem(bytecode0, pc4)pc5 &#x3D; int_add(pc4, Const(1))list_setitem(regs0, n2, a2)# MOV_R_A 2...# ADD_R_TO_A 1opcode3 &#x3D; strgetitem(bytecode0, pc7)pc8 &#x3D; int_add(pc7, Const(1))guard_value(opcode3, Const(5))n4 &#x3D; strgetitem(bytecode0, pc8)pc9 &#x3D; int_add(pc8, Const(1))i0 &#x3D; list_getitem(regs0, n4)a4 &#x3D; int_add(a3, i0)# MOV_A_R 2...# MOV_R_A 0...# JUMP_IF_A 4opcode6 &#x3D; strgetitem(bytecode0, pc13)pc14 &#x3D; int_add(pc13, Const(1))guard_value(opcode6, Const(3))target0 &#x3D; strgetitem(bytecode0, pc14)pc15 &#x3D; int_add(pc14, Const(1))i1 &#x3D; int_is_true(a5)guard_true(i1)jump(a5, regs0, bytecode0, target0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>优化之后</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">loop_start(a0, regs0)# MOV_R_A 0a1 &#x3D; list_getitem(regs0, Const(0))# DECR_Aa2 &#x3D; int_sub(a1, Const(1))# MOV_A_R 0list_setitem(regs0, Const(0), a2)# MOV_R_A 2a3 &#x3D; list_getitem(regs0, Const(2))# ADD_R_TO_A 1i0 &#x3D; list_getitem(regs0, Const(1))a4 &#x3D; int_add(a3, i0)# MOV_A_R 2list_setitem(regs0, Const(2), a4)# MOV_R_A 0a5 &#x3D; list_getitem(regs0, Const(0))# JUMP_IF_A 4i1 &#x3D; int_is_true(a5)guard_true(i1)jump(a5, regs0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>内容上没有太多值得关注的细节，有几点总结一下：</p><ul><li>首先是对于Tracing JIT的论述，特别是循环识别、闭合；</li><li>其次Meta-Level层面上的实现方法；</li><li>在实现上有两点需要注意，<ul><li>PyPy本身的工具链会将RPython编译到C，所以生成的Interpreter本身就是Execution，论文中所谓的tracing-interpreter更多是对应于概念，实现时可以看做就是对C-interpreter的profiling；</li><li>同样需要oSR来做deopt的保障，而这本质是上双重解释器的实现机制上存在巨大差异，所需要的执行流、数据结构完全不同；</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>paper阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimization</tag>
      
      <tag>compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rethinking Incremental and Parallel Pointer Analysis</title>
    <link href="/2022/02/13/inc-pta/"/>
    <url>/2022/02/13/inc-pta/</url>
    
    <content type="html"><![CDATA[<p><a href="https://dl.acm.org/doi/pdf/10.1145/3293606">Rethinking Incremental and Parallel Pointer Analysis</a>来自TOPLAS，介绍了一种增量的可并行的指针分析算法。<span id="more"></span></p><h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>本文介绍了基于<code>Andersen’s Analysis</code>实现的增量指针分析算法。</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1 Δ1 ← ∅;&#x2F;&#x2F; Δ1: the new points-to constraints in each iteration2 Δ2 ← initial method call targets;3 while Δ2   ∅ do &#x2F;&#x2F; repeat until Δ2 is empty4 Δ1 &#x3D; extractNewMethodCallConstraints(Δ2)5 Δ2 &#x3D; runAndersensAnalysis(Δ1)6 end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>代码的变化总是可以用插入（<code>insertion</code>）和删除（<code>deletion</code>）两种动作来表示。</p><p>对于现实世界的代码，<code>Andersen</code>分析可以动态的构建PAG（Pointer Assignment Graph）。那么这种动态构建结果的能力可以直接作用于<code>insertion</code>，即提取新增代码对于指针分析的作用，然后重新执行<code>on-the-fly algorithm</code>进行计算。</p><p>而对于<code>deletion</code>的处理则要复杂许多。需要维护出处信息，用于在语句被删除是，做出对应的变更。</p><p>现有的应对<code>deletion</code>的处理方法基本可以分为两类：</p><ul><li><code>reset-recompute</code>，例如：<ul><li>ICSE ‘14: <a href="https://www.semanticscholar.org/paper/1463e576135cdc331ede7a31caf830b76ba5bacd">Reviser: efficiently updating IDE-/IFDS-based data-flow analyses in response to incremental program changes</a></li><li>PPDP ‘05: <a href="https://www.semanticscholar.org/paper/041dabfd575628ee46b300d1c6ead8346b5c35c9">Incremental and demand-driven points-to analysis using logic programming</a></li></ul></li><li><code>reachability based</code>，例如：<ul><li>CC ‘13: <a href="https://www.semanticscholar.org/paper/6be56b6140bc7dcc1388622796e4806b78ff592c">An Incremental Points-to Analysis with CFL-Reachability</a></li><li>ASE ‘12: <a href="https://www.semanticscholar.org/paper/fe9f9e3d983c0ebba5d640f230e2bd533e60522e">Fast and precise points-to analysis with incremental CFL-reachability summarisation: preliminary experience</a></li></ul></li></ul><h4 id="Reset-Recompute-Algorithm"><a href="#Reset-Recompute-Algorithm" class="headerlink" title="Reset-Recompute Algorithm"></a>Reset-Recompute Algorithm</h4><p>最直接的思路就是当发生删除操作时，对<strong>关联</strong>变量的<code>points-to set</code>进行重置和重算，所谓<strong>关联</strong>就是在PAG上从被删除的根节点出发可达的节点。该方法的问题在于对于需要重置节点的计算大多数情况下可能是冗余的，导致效率不高。</p><p>此外针对这种算法发展出了基于IDE/IFDS框架的优化和基于Graph-Pattern的优化方法。</p><h4 id="Reachability-Based-Algorithm"><a href="#Reachability-Based-Algorithm" class="headerlink" title="Reachability-Based Algorithm"></a>Reachability-Based Algorithm</h4><p>该做法突出一个<strong>updated lazily</strong>的概念，可能受到删除影响的节点不会立刻被重置，当切仅当它们不能从删除的语句所表示的相应内存对象可达时才会被更新。这种做法同样相当费时，可达性计算的成本会随着PAG图的规模而增加。</p><h3 id="New-Incremental-Algorithm"><a href="#New-Incremental-Algorithm" class="headerlink" title="New Incremental Algorithm"></a>New Incremental Algorithm</h3><p>新的算法通过识别哪些是当<code>deletion</code>发生时，哪些PAG中的节点需要被更新，并及时停止更新的传递来减少冗余计算，同时证明了实现并行的可能。</p><p>首先需要通过Strongly Connected Components（SCC）优化实现PAG中的去环。因为对于SCC中的节点，<code>points-to set</code>是无效的，那么它们可以塌缩成一个单独的节点，以此保证PAG中无环。</p><p>在一个无环的PAG中，可以得到以下两个性质</p><blockquote><p>Lemma 1 [Incoming Neighbors Property]. Consider an acyclic PAG and a pointer node q of which an object o ∈ pts (q). If q has an incoming neighbor r (that is, there exists an edge r →q) and o ∈ pts (r ), then there must exist a path from o to r without going through q.</p></blockquote><p>这条可以推导出，当对象<code>O</code>属于<code>Q</code>的指向集合，如果删除一条从<code>Q</code>指向<code>P</code>的边，如果<code>P</code>的其他<code>incoming neighbor</code>不包含对象<code>O</code>，那么<code>O</code>可以从<code>P</code>的指向集中删除。这说明当某条边被删除时，我们只需要check这条边终点的<code>incoming neighbor</code></p><blockquote><p>Lemma 2 [Outgoing Neighbors Property]. Consider an acyclic PAG and a pointer node q of which an object o ∈ pts (q). Assume that q has an outgoing neighbor w (i.e., there exists an edge q → w) and w has an incoming neighbor r (different from q) such that o ∈ pts (r ). If r cannot reach q, then at least one of the following two conditions (or both) must hold in the PAG:</p><p>(1) There exists a path from o to w without going through q.</p><p>(2) There exists a path from q to r .</p></blockquote><p>即对于<code>p -&gt; q -&gt; w</code>的情况，如果删除<code>p-&gt;q</code>并且<code>o</code>从<code>q</code>的指向集中删除，那么对于作为<code>q</code>的<code>outgoing neighbors</code>的<code>w</code>而言，需要检查它的<code>incoming neighbors</code>，如果<code>incoming neighbors</code>的指向集中仍然含有<code>o</code>，那么传播终止。</p><p>基于上述结论，设计了新的算法来增量处理<code>deletion</code>的情况。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/2022-02-13-03-42-25.png"></p><p>举例说明，PAG如下图所示，当删除掉<code>x -&gt; y</code>这条边：</p><ul><li>由于<code>y</code>的其他入度不包含<code>o1</code>，所以<code>o1</code>可以从<code>y</code>的指向集中删除（Lemma 1）；</li><li>继续考察<code>y</code>的出度：<ul><li>对于<code>z</code>，由于<code>z</code>的其他入度同样不包含<code>o1</code>，所以同样删除；</li><li>对于<code>w</code>，存在一条<code>o1 -&gt; x -&gt; w </code>的路径，所以这个修改会被跳过，并且终止传播（Lemma 2）；</li></ul></li></ul><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/2022-02-13-03-44-46.png"></p><h4 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h4><blockquote><p>Lemma 3 [Change Idempotency Property]. For an edge insertion or deletion, the update to each points-to set is an idempotent operator. In other words, if the change propagates to a node more than once from different paths, the effect of the change (i.e., the modification applied to the corresponding points-to set) must be the same.</p></blockquote><p>这条性质类似于幂等性？！这保证了对于一个修改的不同路径进行并行化传播，并不会发生冲突，如下图：</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/2022-02-13-03-45-38.png"></p><p>无论路径一或路径二的先后顺序如何，都不会影响最终的结果。</p><h3 id="DISCUSSIONS"><a href="#DISCUSSIONS" class="headerlink" title="DISCUSSIONS"></a>DISCUSSIONS</h3><ul><li>Flow sensitivity</li></ul><p>没有选择flow-sensitivity的原因在于，需要同时维护control-flow的变化，而control-flow和data-flow的分析并不是正交的，特别是高精度的control-flow graph和points-to analysis通常是相互递归的。</p><ul><li>Context sensitivity</li></ul><p>由于对于context而言PAG中edge的增加和删除都是正交的，所以完全可以改造成上下文敏感分析。</p><p>图片数据、伪代码来源 <a href="https://dl.acm.org/doi/pdf/10.1145/3293606">Rethinking Incremental and Parallel Pointer Analysis</a></p>]]></content>
    
    
    <categories>
      
      <category>paper阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>static analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPython Key-Sharing Dictionary优化</title>
    <link href="/2022/01/16/shared-keys/"/>
    <url>/2022/01/16/shared-keys/</url>
    
    <content type="html"><![CDATA[<h3 id="PEP-412-–-Key-Sharing-Dictionary"><a href="#PEP-412-–-Key-Sharing-Dictionary" class="headerlink" title="PEP 412 – Key-Sharing Dictionary"></a>PEP 412 – Key-Sharing Dictionary</h3><p><a href="https://www.python.org/dev/peps/pep-0412/">PEP-412</a>来自2012年， 提出了对 dict 实现的改变，允许保存<code>object</code>属性的 dict 与同一类别实例的其他属性字典共享key列表。这种称为<a href="https://www.python.org/dev/peps/pep-0412/#id11">Split-Table dictionaries</a>。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/dict.png"></p><p>与之相反的不共享key列表的称为<a href="https://www.python.org/dev/peps/pep-0412/#id12">Combined-Table dictionaries</a>。当创建一个对象的<code>__dict__</code>时，它们是以<strong>split</strong>的形式被创建的。键表被缓存在类型中，允许一个类的实例的所有属性字典共享键。如果这些字典的键开始出现分歧，那么就会从<strong>split</strong>模式转换为<strong>combine</strong>模式。</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>通过将键（和哈希值）与值分开，就有可能在多个字典之间共享键，并改善内存的使用，这些字典的大小通常是当前字典实现的一半。</p><p>基准测试表明，面向对象的程序的内存使用减少了10%到20%，其他程序的内存使用没有明显变化。</p><h4 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h4><p>新的实现主要目的是内存优化。当键没有被共享时（例如在模块字典和由<code>dict()</code>创建的字典中），那么性能与当前的实现没有变化（在1~2%之内）。</p><p>对于共享键的情况，新的实现倾向于将键和值分开，但减少了总的内存使用。这在很多情况下会提高性能，因为减少内存使用的效果超过了局部性的损失，但有些程序可能会显示出小幅的减速。</p><p>基准测试显示，大多数基准测试的速度没有明显变化。面向对象的基准测试显示，当它们创建大量相同类别的对象时，速度会有小幅提升（gcbench基准测试显示有10%的速度提升，这可能是一个上限）。</p><h3 id="内存改善"><a href="#内存改善" class="headerlink" title="内存改善"></a>内存改善</h3><p><a href="https://bugs.python.org/issue27350">issue27350</a>，该issue对key列表的内存使用进行了进一步优化。这个优化来自PyPy的实现，<a href="https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html">https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html</a>。简单来说就是用一个数组来记录hash槽位，这样dict entry就可以紧凑的放到一起。entry的大小要大于表示位置信息的整型，从而起到节省空间的作用。</p><p>优化前：</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/dict_o.png"></p><p>优化后：</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/dict_mem.png"></p><h3 id="3-11进一步优化"><a href="#3-11进一步优化" class="headerlink" title="3.11进一步优化"></a>3.11进一步优化</h3><p>但是在issue27350加入之后产生了一个新的问题，就是当共享key的插入顺序不一致时，也需要转换为<strong>combine</strong>模式。例如：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">a1 <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span>field1 <span class="token operator">=</span> <span class="token number">1</span>a1<span class="token punctuation">.</span>field2 <span class="token operator">=</span> <span class="token number">2</span>a2<span class="token punctuation">.</span>field2 <span class="token operator">=</span> <span class="token number">2</span>a2<span class="token punctuation">.</span>field1 <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>虽然<code>a1</code>和<code>a2</code>都是类型<code>A</code>且属性相同，但是由于插入顺序不一致，导致key列表的内存分布并不一致。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/example.png"></p><p><code>a2</code>的<code>__dict__</code>就需要从<strong>split table</strong>变为<strong>combine table</strong>。</p><p><a href="https://bugs.python.org/issue40116">bpo-40116</a>解决了这个问题，在<code>split table</code>的<code>values</code>列表中同样插入了一个排序数组，扩展了<strong>split table</strong>的使用范围。</p><p><a href="https://github.com/python/cpython/blob/09087b8519316608b85131ee7455b664c00c38d2/Include/internal/pycore_dict.h#L102-L108">https://github.com/python/cpython/blob/09087b8519316608b85131ee7455b664c00c38d2/Include/internal/pycore_dict.h#L102-L108</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimization</tag>
      
      <tag>CPython</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lazy Basic Block Versioning续</title>
    <link href="/2022/01/13/lazy-bb-versioning2/"/>
    <url>/2022/01/13/lazy-bb-versioning2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.semanticscholar.org/paper/c64954e9f91090537b13dfcd727aa76b612646ff">Interprocedural Type Specialization of JavaScript Programs Without Type Analysis</a> 来自ECOOP2016，是在Simple and Effective Type Check Removal through Lazy Basic Block Versioning基础上实现的，主要将BBV扩展到interprocedural。<span id="more"></span></p><h3 id="Interprocedural-Basic-Block-Versioning"><a href="#Interprocedural-Basic-Block-Versioning" class="headerlink" title="Interprocedural Basic Block Versioning"></a>Interprocedural Basic Block Versioning</h3><h4 id="Type-Object-Shape"><a href="#Type-Object-Shape" class="headerlink" title="Type Object Shape"></a>Type Object Shape</h4><p>实现过程间BBV主要依赖以下两项：</p><ul><li><code>Type Object Shape</code>，因为在JS中，函数通常被存储在对象中，这包括对象方法和全局函数（JS将全局函数存储为全局对象的属性）。需要将类型标签附加到对象属性中，包括全局变量；</li><li><code>Object Shapes and Shape Tests</code>，目前的商业JS引擎都有一个<strong>object shapes</strong>概念，与Self VM的属性图概念类似。对于任意对象都包含一个指向形状描述的指针，后者提供其内存布局：属性、属性的内存偏移量、属性标志(读写状态等)。而由于遍历这些属性的代价非常高昂，现代JS引擎会通过<strong>PICs(Polymorphic Inline Caches)<strong>来优化属性访问。通常情况下，通过</strong>shape tests</strong>来判断当前缓存是否适用，或者是否需要对PIC进行更新；</li></ul><p>将上述两项结合，实现——<code>Extending Shapes with Types</code>，即一旦通过<code>shape tests</code>确定某个layout之后，同时也获得了对应属性的类型。</p><p>例如对于如下代码</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sumList</span> <span class="token punctuation">(</span><span class="token parameter">lst</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lst <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">return</span> lst<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token function">sumList</span><span class="token punctuation">(</span>lst<span class="token punctuation">.</span>next <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>可以获得三个带有<code>type tag</code>的<code>object shape</code>，其中<code>G</code>表示全局对象：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; Linked list node shapeS1: &#123; val: (slot 0, int32), next: (slot 1, null) &#125;S2: &#123; val: (slot 0, int32), next: (slot 1, object) &#125;&#x2F;&#x2F; Global object shape&#x2F;&#x2F; Closures have method identity informationG: &#123;    ...,    Error: (slot 1, closure&#x2F;Error),    ...,    sumList: (slot 33, closure&#x2F;sumList),&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>可以获得如下CFG：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">A:if is_null (lst) goto I:B: if not is_object (lst) goto stub1C: if not is_shape (lst , S1) goto C2val &#x3D; read_slot (lst , 0) &#x2F;&#x2F; val is known to be int32next &#x3D; read_slot (lst , 1) &#x2F;&#x2F; next is known to be nullD: if not is_shape ( globalObj , G) goto stub2sumfn &#x3D; read_slot ( globalObj , 33) &#x2F;&#x2F; sumfn is known to be a closureE: t1 &#x3D; sumfn ( next )if not is_int32 (t1) goto stub3G: t2 &#x3D; add_int32 (val , t1)if overflow goto stub4H: return t2I: return 0C2: if not is_shape (lst , S2) goto stub5val &#x3D; read_slot (lst , 0) &#x2F;&#x2F; val is known to be int32next &#x3D; read_slot (lst , 1) &#x2F;&#x2F; next is known to be objectD2: if not is_shape ( globalObj , G) goto stub6sumfn &#x3D; read_slot ( globalObj , 33) &#x2F;&#x2F; sumfn is known to be a closureE2: t1 &#x3D; sumfn ( next )if not is_int32 (t1) goto stub7G2: t2 &#x3D; add_int32 (val , t1)if overflow goto stub8H2: return t2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>除了<code>type tag</code>之外，还可以附加函数签名信息，这样就可以在<code>callsite</code>上获取完整的<code>callee</code>。</p><h4 id="Entry-Point-Versioning"><a href="#Entry-Point-Versioning" class="headerlink" title="Entry Point Versioning"></a>Entry Point Versioning</h4><p>当在一个<code>callsite</code>位置确定<code>callee</code>之后，同样也就可以确定<code>paramater</code>的类型，此时就可以在<code>callee</code>中生成<code>Entry Basic Block</code>的特化副本。在消除<code>callee</code>中多余的类型测试的同时，还可以在不对参数进行装箱的情况下传递参数，从而减少函数调用的开销。</p><h4 id="Call-Continuation-Specialization"><a href="#Call-Continuation-Specialization" class="headerlink" title="Call Continuation Specialization"></a>Call Continuation Specialization</h4><p>对于<code>callsite</code>另一个问题是返回值类型的传播。对于任意<code>function</code>来说，它可能在程序的任意位置被调用。因此这必然是一个<code>context sensitive</code>的。但是对于JIT而言，可以使用<code>lazy</code>的方式来低成本地执行优化。也就是直到第一次在一个<code>callsite</code>位置返回时才针对返回值类型进行特化，而不是像<code>paramater</code>，当<code>callsite</code>位置的类型确定之后就可以生成对应的<code>machine code</code>。</p><h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><h4 id="Type-Tests"><a href="#Type-Tests" class="headerlink" title="Type Tests"></a>Type Tests</h4><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/2022-01-13-01-04-41.png"></p><p>上图是不同技术可消除的<code>type test</code>的比例。基础的过程内的BBV平均可以消除61%的test，加入<code>typed shapes</code>之后增加到79%，<code>entry spec</code>增加到89%，完全版本则达到94%。</p><h4 id="Type-Analysis"><a href="#Type-Analysis" class="headerlink" title="Type Analysis"></a>Type Analysis</h4><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/2022-01-13-01-11-24.png"></p><p>与<code>type analysis</code>对比。</p><h4 id="Execution-time"><a href="#Execution-time" class="headerlink" title="Execution time"></a>Execution time</h4><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/2022-01-13-01-15-33.png"></p><h3 id="个人评价"><a href="#个人评价" class="headerlink" title="个人评价"></a>个人评价</h3><p>简单总结，核心是通过<strong>object shape</strong>来扩展BBV到过程间，实现全程序的优化，相对而言的代价要比<code>whole-program type analysis</code>的代价要小。</p>]]></content>
    
    
    <categories>
      
      <category>paper阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimization</tag>
      
      <tag>compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lazy Basic Block Versioning</title>
    <link href="/2022/01/03/lazy-bb-versioning/"/>
    <url>/2022/01/03/lazy-bb-versioning/</url>
    
    <content type="html"><![CDATA[<p>Simple and Effective Type Check Removal through Lazy Basic Block Versioning，这篇论文来自ECOOP2015，介绍了一种可以有效消除类型检查的技术，用于动态类型语言的JIT编译。<span id="more"></span></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>动态类型语言需要动态的进行类型检查。在性能敏感的场景下，动态语言的虚拟机会选择消除冗余的类型检查。</p><p>传统上，语言虚拟机倾向于使用<code>type infer</code>来消除类型检查。但是对于JS、Python这样的动态类型语言，存在三个主要问题：</p><ul><li>这些语言通常不适合于<code>whole-program</code>的类型分析，<code>eval</code>和模块的动态加载等特性会破坏以前的类型信息；</li><li>在时间和内存上的代价使得其并不适合在JIT上使用，特别是某些追求编译速度的基线编译器上；</li><li>某些代码单纯通过分析是无法消除类型检查的，需要进行某些变形；</li></ul><p>由于上述原因，普遍的JS虚拟机设计比如V8、SpiderMonkey等都通过<code>multi-tiered</code>和<code>OSR</code>这样的复杂机制在激进优化的同时保证语义正确。</p><p>这篇论文提出一种可以在JIT编译时对关键代码路径消除冗余类型检查的方法——<strong>lazy basic block versioning</strong>（以下简称BBV）。不需要代价昂贵的程序分析技术，不受传统类型分析的精度限制，避免了激进优化导致的实现上的复杂性。</p><p>简单来说Code Generator维护了<code>typing context</code>，保存每个变量的类型。一个类型检查指令会分化出新的<code>typing context</code>，对每个<code>context</code>而言，其中的每个变量的类型都是经过检查的。当遇到一个类型测试分支指令并且参数的类型已知，在代码生成时就可以根据分支方向消除类型检查。</p><p>而编译器可能会对一个basic block生成多个<strong>version</strong>的代码。在该基本块的分支上遇到的每个类型环境都有一个版本。这就允许了可以对该基本块以及它的后继中的活跃变量进行类型特化。虽然基本块的版本是建立在单个基本块的层面上的，但<code>typing context</code>向后继的继续传播带来了对整个控制流图进行<code>type-specializing</code>的机会。</p><p>与传统的<code>type infer</code>相比最大的区别在于，BBV不需要在推导时计算不动点。对于一个程序点而言，变量的类型可能是多种的。在传统的类型分析中，几种可能的类型将被联合起来，从而导致分析的保守性。BBV则对不同的基本块版本或程序路径，精确的根据上下文来控制类型。</p><p>在BBV中循环也不需要被特殊处理，如果首次执行到<code>loop header</code>时的<code>context</code>是<code>C1</code>，那么再次回到<code>loop header</code>时将生成新的<code>C2</code>，以此类推。但由于可能的<code>context</code>是有限的，并且实际上大多数变量在函数中总是维持一种类型，所以生成的<code>version</code>数量也总是有限并且相当少。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>论文实现基于JS虚拟机——Higgs，支持ES5标准，但是作出了一些限制，比如<code>eval</code>只能访问全局变量。</p><p>下面用一个例子来说明。对于一个简单的JS函数：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    s <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv1.png"></p><p>上图是代码对应的CFG，省略了其中一些处理非int32类型、处理Exception的基本块。</p><p>如图所示存在5条<code>type check</code>的判断条件。</p><ul><li>当编译该函数时，block A会生成一个version A1，当中的变量<code>s</code>和<code>i</code>都是int32类型；</li><li>对于block B则不会再编译任何东西，因为<code>i</code>在当前context中已经是int32类型；</li><li>之后生成block C的version C1，而变量<code>n</code>的类型检查则会被保留；</li><li>以此类推，在<code>typing context</code>向后继续传播，<code>s</code>和<code>i</code>的类型检查都会被消除；</li><li>代码连续执行，一直到循环的结束。在最后一次循环迭代中，D1的小于比较失败。这就触发了循环退出块E1的编译。最终结果如下所示：</li></ul><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv2.png"></p><h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><p>评估的Benchmark来自于SunSpider和Google V8的总共26个基准测试用例。</p><h4 id="Type-test-count"><a href="#Type-test-count" class="headerlink" title="Type test count"></a>Type test count</h4><p>首先测试的是相对于无优化情况，最终执行的<code>type check</code>的比例。<code>analysis</code>表示通过常用<code>type infer</code>算法优化之后所执行的<code>type check</code>个数，<code>maxvers</code>表示对于一个基本块可以生成的版本个数的上限，通过限制版本个数上限，可以控制编译时长和内存占用。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv3.png"></p><p>上图中可以发现，即便版本上限低至1个，BBV也能达到通过分析算法优化的效果，这可能是因为大多数变量的类型都是单态的。bitwise-and基准测试只对全局变量进行操作，而实现的系统无法提取这些变量的类型，因此在这个基准测试中，类型分析和BBV都没有什么作用。</p><h4 id="Code-Size"><a href="#Code-Size" class="headerlink" title="Code Size"></a>Code Size</h4><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv4.png"></p><p>上图是对应version数量的基本块的比例。大多数基本块只有一个版本，5.2%有两个版本，只有0.16%的区块有5个或更多的版本。因此，拥有大量版本的基本块是一种罕见的情况。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv5.png"></p><p>上图是生成的最终代码大小的对比。程序分析的方法几乎总是能轻微减少代码体积。因为分析消除类型测试，并生成更多的优化代码，这些代码通常更小。另一方面，BBV会生成多个基本块的版本，但并不总是会导致生成更多的代码，生成的代码量不会随着版本个数限制的上升而线性增加。一个原因是如前图所示，需要多版本的基本块的占比相当低。另一个原因是优化导致的体积下降。</p><h4 id="Execution-Time"><a href="#Execution-Time" class="headerlink" title="Execution Time"></a>Execution Time</h4><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv6.png"></p><h4 id="Compilation-Time"><a href="#Compilation-Time" class="headerlink" title="Compilation Time"></a>Compilation Time</h4><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv7.png"></p><h4 id="Baseline-Compiler"><a href="#Baseline-Compiler" class="headerlink" title="Baseline Compiler"></a>Baseline Compiler</h4><p>Speedup relative to V8 baseline</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv8.png"></p><p>Speedup relative to TraceMonkey</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv9.png"></p><p>Speedup relative to Truffle JS </p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/bbv10.png"></p><h3 id="个人评价"><a href="#个人评价" class="headerlink" title="个人评价"></a>个人评价</h3><p>最早知道BBV是来自于PyPy那篇著名的blog，在回顾PyPy JIT技术发展时提到使用了类似的技术。BBV的想法和我之前的一个想法比较象——必需要check类型的变量（即在同一个程序点存在多种类型）在大多数情况下是有限的，如果可以准确收集到它们，那么就可以用他们来构造一个上下文类型环境，在这个范围内的代码就可以像静态类型那样优化，而当环境发生变化，就新特化出一个版本。</p><p>所以从根本来讲，本质是希望对于每一次<code>type check</code>可以支配尽可能多的代码路径。</p><p>BBV则是从代码本身出发，将<code>type check</code>的最作用传播出去，而<code>typing context</code>就是传播的载体。通过context对比找到能适用的（或者不能适用的）基本块，从而实现优化、减少冗余。</p><p>另一方面，这篇文章的优化是一个后向传播的，那么是不是存在某些情况，需要做前向分析呢？比如对于一个基本块的context，可以在它的前趋块上与其他context合并。</p><p>还有一点是当Native Code与解释器交替执行的时候，可能并不需要太过严格的类型约束。当然这点也许可以从<code>type check</code>本身的优化入手。</p><p>图片数据来源：《Simple and Effective Type Check Removal through Lazy Basic Block Versioning》</p><p>Higgs：<a href="https://github.com/higgsjs/Higgs">https://github.com/higgsjs/Higgs</a></p>]]></content>
    
    
    <categories>
      
      <category>paper阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>type system</tag>
      
      <tag>optimization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Functional programming compiler optimization</title>
    <link href="/2021/12/31/fp-ip-optimization/"/>
    <url>/2021/12/31/fp-ip-optimization/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.quora.com/Can-a-functional-programming-language-compiler-optimize-as-well-as-an-imperative-programming-language-compiler-in-practice">Can a functional programming language compiler optimize as well as an imperative programming language compiler in practice?</a></p><p>在搜索FP优化的时候看到这么一个问题，高赞回答（总共也就俩回答）总结的挺好。</p><h3 id="原回答简单翻译版"><a href="#原回答简单翻译版" class="headerlink" title="原回答简单翻译版"></a>原回答简单翻译版</h3><blockquote><p>你的总结很恰当：对编译器来说，优化函数式程序更容易，但对程序员来说，优化命令式代码更容易。而且，至少现在，在大多数对性能敏感的情况下，程序员比编译器更知道如何优化代码。</p></blockquote><blockquote><p>大多数现代的优化编译器并不考虑多种可能的方式来优化一个给定的程序。相反，它们有一套由各种启发式方法指导的优化序列。对于任何给定的程序，优化过程是单向的，不是基于搜索的。优化器不进行回溯。这意味着，拥有更多可能的优化可能会使优化编译器更难编写，但不会使代码更难被编译器优化。优化的数量其实并不重要。</p></blockquote><blockquote><p>由于编译器是一次性地进行优化，而不是尝试这些优化，如果效果不好，再进行回溯，所以实际的优化有两个主要的限制：它们必须是可证明正确的，而且它们必须永远不会降低性能。(或者，至少是几乎不降低性能）。</p></blockquote><blockquote><p>第一个约束是使函数式语言（或者至少是像Haskell这样的纯语言）更容易优化的原因。许多高级别的优化涉及到移动、复制甚至是部分评估代码。对于<em>pure code</em>要证明这些转换保留语义正确是很容易的，但对于有<em>side effect</em>的代码，要证明这一点是相当困难的，甚至常常是不可能的。虽然命令式编译器勇敢地分析代码以检测和追踪效果，但如果语言能保证纯洁性，那就容易多了。</p></blockquote><blockquote><p>这使得像Haskell这样的语言能够大大地利用某些高级优化的优势。也许最重要的一个是内联，即用函数主体的内联副本来代替函数调用。内联对于其他优化来说是一个强大的倍增器：内联的函数体可以被化简，部分特化，并与它的其他上下文一起被优化。从某种意义上说，内联将更简单的局部优化变成更强大的全局优化。</p></blockquote><blockquote><p>GHC可以跨越模块边界内联代码，在不需要极大代价的情况下进行全程序优化。它甚至还保留了单独的编译。经典的全程序优化的大部分复杂性来自于需要跟踪状态如何在程序中传播的流程分析。这不仅是困难的，特别是在不同的模块之间，而且还必须是保守的性质，排除了部分本可能的优化。而在纯函数式语言中，这些都是不必要的。</p></blockquote><blockquote><p>跨模块内联和其他优化的结合让Haskell有了一些极其高级的抽象，比如<a href="https://hackage.haskell.org/package/lens">lenses</a>而不影响性能。</p></blockquote><blockquote><p>事实上，Haskell的优化非常容易推理，它允许库以重写规则的形式添加新的优化功能。即使在Haskell中，这也绝对是一个面向专家的功能，很容易搞砸；在任何其他语言中，这完全是一场噩梦。(而且，重写规则通过内联得到了极大的支持，这使得编译器可以将它们应用于不同地方的代码）。</p></blockquote><blockquote><p>像这样的高级优化在随处可见副作用的命令式语言中要难得多。为了保持正确性，他们必须明显地更加保守，要么少做要么不做。一个可爱的例子，在优化之前，命令式程序实际上被翻译成了一种不可变的中间形式–单静态赋值（SSA），其中变量被精确地赋值一次。这只是更容易操作而已。(转换的确切细节是限制高层优化可以应用于命令式程序的部分原因)。</p></blockquote><blockquote><p>尽管如此，现代的命令式编译器还是不遗余力地进行高级优化–这是对从事编译器工作的人和所花费的大量时间或精力的证明。在许多方面，GHC实际上比最先进的命令式编译器更简单，而且投入的研发努力也少得多，但仍能通过广泛的优化取得令人印象深刻的结果，这主要是因为语言本身使它更容易。</p></blockquote><blockquote><p>当然，这主要是指高层次的优化：对代码进行广泛的、通常是非局部的修改，甚至可能改变所涉及的逻辑。编译器也可以通过<code>select instruction</code>、<code>register alloc</code>等，从低级别的优化中获得性能。这些优化发生在一个点上，源语言之间的差异是毫无意义的，原则上函数式语言或命令式语言可以用得同样好。</p></blockquote><blockquote><p>在实践中，某些命令式语言往往有最好的底层优化，因为人们已经投入了大量的工作来实现它们。另一方面，GHC在这方面相对有限，很大程度上是因为它是由研究驱动的，将低级优化应用于函数式语言并不是很新颖。这也是LLVM后端令人兴奋的原因之一，特别是对于计算密集型代码：它让GHC重新使用为高性能C++开发的低级优化，而不必自己重新实现。</p></blockquote><blockquote><p>然而，即使是现代编译器，仍有许多关键细节严重影响性能，但只能通过手工解决。这就是命令式语言真正领先的地方，因为它们提供了对底层机器的更直接的控制。这让程序员可以有意识地考虑一些重要的细节，如缓存行为，减少额外的操作和内存查询，并普遍促使程序更好地反映CPU的执行情况。这也让程序员可以针对原始吞吐量以外的因素进行优化，如一致性（用于实时计算）或能源效率。这在某种程度上在函数式语言中仍然是可能的，但尴尬的是，这种行为会使得它违背了语言的核心抽象。更困难的是，函数式语言对其运行时系统和垃圾收集器的依赖程度明显高于C或C++等底层命令式语言。</p></blockquote><blockquote><p>因此，命令式程序，至少在给程序员精细控制内存管理的系统语言中，程序员肯定更容易进行优化。反过来说，函数式程序，尤其是像Haskell这样的纯函数式，更容易被编译器优化，尤其是高级别的优化。</p></blockquote><h3 id="发表点个人观点"><a href="#发表点个人观点" class="headerlink" title="发表点个人观点"></a>发表点个人观点</h3><ul><li><p>纯FP对side effect的严格控制是会给编译优化带来好处的，特别是对各种motion相关的优化，扩大了范围减少了工作量。但是对于混合范式的语言，比如scala，这样的假设或者保证是不成立的，那么可能会因为需要更多的interprocedural optimization导致优化效率下降。</p></li><li><p>另一点可以利用的是immutable object。是否有可能通过shape analysis之类的手段，配合为immutable object而设计的heap model，来提高程序执行中的对象分配、拷贝、引用效率，提高缓存命中指导GC运行。但这个方向目前还没（至少我不知道）有突出的进展。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>PL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>optimization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Is sound gradual typing dead 解读</title>
    <link href="/2021/12/01/Is-sound-gradual-typing-dead/"/>
    <url>/2021/12/01/Is-sound-gradual-typing-dead/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www2.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf">Is sound gradual typing dead?</a> 主要研究<code>sound gradual typing</code>在编译中的收益问题，结论认为通过<code>gradual type</code>来指导编译优化是一件不划算的事情。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>动态类型语言在构建（或者生长）出复杂软件系统的时候会因为缺少可靠的类型信息而变得难以维护。一种解决方法是通过扩展语言，增量的增加类型信息。<code>Gradual typing</code>就是通过<code>type annotation</code>在<code>typed</code>和<code>untyped</code>代码边界增加<code>run-time check</code>，来建立<code>type soundness</code>。</p><p>这种<code>Gradual typing</code>的使用有两个隐含的要求。首先，类型系统适应常见的无类型的编程习惯。这允许程序员在添加类型时对现有代码进行最小的改动。其次，性能代价是可以容忍的，理想情况下新增加的类型对于性能优化应该是有益的。</p><p>而这篇文章通过实验手段评估了<code>Gradual type system</code>对性能的影响，结论是这种类型系统的代价是不可容忍的，因此提出了<strong>sound gradual typing is dead</strong>。</p><h2 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h2><p>实验基于<code>Typed Racket</code>实现，方法是对于一个完整程序，对其中n个模块标注type。实现一个lattice，Top是全部模块<code>typed</code>，Bottom是全部模块<code>untyped</code>，然后进行性能测试。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/2021-12-29%2023-39-20.png"></p><p>如图所示是一个通过执行时间对比的<code>pyerformance lattice</code>，被涂色的圆点表示<code>typed module</code>，未涂色的表示<code>untyped module</code>。当所有模块被标注类型之后（Top），性能提升约30%。说明当可以对任意<code>operator</code>、<code>field access</code>执行<code>specialization</code>和<code>type check</code>的情况下，对性能是有益的。</p><p>然而对于几乎所有的部分类型标注都出现了不同程度的性能下降。实验中观察到如下几点：</p><ul><li>对<code>main</code>模块增加<code>annotation</code>对性能几乎没有影响，因为它只是一个驱动模块；</li><li>在任何一个主要模块–<code>data</code>、<code>label</code>或<code>structs</code>–上添加类型，而其他模块不添加类型，会导致速度至少降低35x。这组模块是紧密耦合的。增加一个未类型化的边界来分隔这组模块的元素，会导致相互引用时，增加相关的检查成本；</li><li>进一步观察<code>data</code>和<code>label</code>可以发现，后者通过一个适配器模块依赖于前者。当两个模块中的任何一个没有类型化时，这个适配器引入了一个边界检查。当这两个模块都是类型化的，但所有其他模块都是未类型化的，速度就会降低到13x左右。<code>structs</code>模块以同样的方式依赖于<code>data</code>，另外还依赖于<code>label</code>。因此，在<code>structs</code>和<code>data</code>都被类型化的配置中，仍然有很大的减慢。当所有三个模块都被类型化时，速度会降低到5x；</li><li>最后，接近最差减速情况的配置是<code>data</code>未被类型化，但其他几个模块被类型化。考虑到上面提到的耦合性，这是有道理的；在未类型化的数据和其他类型化的模块之间引起的巨大性能降低；</li></ul><h2 id="误差"><a href="#误差" class="headerlink" title="误差"></a>误差</h2><p>原文中认为可能影响实验结论的几个点：</p><ul><li>Benchmark太小并且每种配置一个core并发执行的（这个地方听起来有点扯）；</li><li>Benchmark所引用的其他库都是<code>untyped</code>；</li><li>对一个具体变量<code>type annotation</code>很少是唯一的，这种选择可能会影响性能；</li><li>Typed Racket自身实现的问题，它会编译成Racket并且使用一个传统的JIT编译。它没有尝试消除冗余的类型检查；</li></ul><h2 id="个人评价"><a href="#个人评价" class="headerlink" title="个人评价"></a>个人评价</h2><p>感觉实验结果并不靠谱，特别是Typed Racket本身的编译实现和优化能力相当值得怀疑。但是至少说明两点：</p><ul><li>即便是依赖库<code>untyped</code>的情况下，对全程序进行类型标注也是有益的，这预示着对于大型程序来说，部分核心代码进行类型标注从而带来性能提升是可行的；</li><li><code>type check</code>的负载在相当多的情况下是无法用带来的优化消除的，类型特化这类的优化可能需要更加精确才行；</li></ul>]]></content>
    
    
    <categories>
      
      <category>paper阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>type system</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog复活辣</title>
    <link href="/2021/11/29/restart/"/>
    <url>/2021/11/29/restart/</url>
    
    <content type="html"><![CDATA[<h3 id="Blog重建计划表"><a href="#Blog重建计划表" class="headerlink" title="Blog重建计划表"></a>Blog重建计划表</h3><p><del>new一个目录出来 2021-11-29</del></p><p><del>选择一个theme 2021-12-01</del></p><p><del>换一个theme 2021-12-02</del></p><p><del>配置theme 2021-12-05</del></p><p><del>再换theme 2021-12-11</del></p><p><del>迁移 2021-12-20</del></p><p><del>更换图床 2021-12-28</del></p><p><del>配置什么的太麻烦了就这样吧 2021-12-29</del></p><p><del>纳尼，我怎么发布了 2021-12-31</del></p><p>。。。</p><p>。。</p><p>继续配置，未完。</p>]]></content>
    
    
    <categories>
      
      <category>胡言乱语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>费力的dex字节码转换器</title>
    <link href="/2019/12/05/dedx/"/>
    <url>/2019/12/05/dedx/</url>
    
    <content type="html"><![CDATA[<h3 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h3><p>三个多月磨磨唧唧，终于拿出了一版稍微有那么点样的开源工具–dedx。</p><p>链接<a href="https://github.com/penguin-wwy/dedx">https://github.com/penguin-wwy/dedx</a><span id="more"></span></p><p>dedx是一款将apk的smali字节码转换为jvm字节码的转换器。在此之前，我使用过的dex2class的工具主要有两种。</p><p>一种是dex2jar（链接：<a href="https://github.com/pxb1988/dex2jar%EF%BC%89%E3%80%82">https://github.com/pxb1988/dex2jar）。</a><br>这是一款完成度相当高的开源工具。尤其在Android逆向上基本是人手必备。</p><p>另一种是利用soot（链接：<a href="https://github.com/Sable/soot%EF%BC%89%E3%80%82">https://github.com/Sable/soot）。</a><br>这是一款完成度也非常高、学术界较常使用的Java optimization framework。soot通过dexlib2将dex文件解析，编译为jimple（soot生成的一种IR），再将jimple转回jvm class，从而达到dex2class的目的。</p><p>dedx的完成度自然是无法和上两个相比。而促使我做这么一个费力不讨好的东西的原因主要有两个：</p><p>1、dex2jar和soot都有各自的不足。dex2jar生成的class并是很不严格，不一定能work。而soot本身过于重量级（我只是想得到一个class文件而已），运行过程会产生太多的分析和依赖；</p><p>2、闲的。</p><p>dedx可能的好处在于，一来dedx使用<a href="https://github.com/aosp-mirror/platform_dalvik/tree/master/dx">dx</a>作为dex的解析工具（dx是Google Android build tools中的dex编译器，负责将class文件编译为单个class的dex文件）。从而带来指令集上的同步，后续的更新也会更方便。</p><p>二来使用ASM作为jvm的字节码生成，可以生成更高版本的class文件，使用更新的jvm指令。</p><p>除此之外，dedx的class文件生成是以完全的严格的class文件为目标。简单来说，目标是生成可以执行的class文件。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/penguin-wwy/dedx.git<br><span class="hljs-built_in">cd</span> dedx<br>./gradlew distZip<br></code></pre></td></tr></table></figure><h4 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h4><p>支持黑白名单设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">~$ ./dedx -<span class="hljs-built_in">help</span><br>usage: <span class="hljs-built_in">command</span> [options] &lt;dexfile&gt;<br>    --black-classes &lt;[class_name | @file]&gt;   Specify classes <span class="hljs-built_in">which</span> not to<br>                                             load (default none)<br>    --classes &lt;[class_name | @file]&gt;         Specify classes <span class="hljs-built_in">which</span> to load<br>                                             (default all)<br> -g,--debug                                  Print debug info<br> -h,--<span class="hljs-built_in">help</span>                                   Print <span class="hljs-built_in">help</span> message<br>    --<span class="hljs-built_in">log</span> &lt;arg&gt;                              Specify <span class="hljs-built_in">log</span> file<br> -o,--output &lt;dirname&gt;                       Specify output dirname<br>    --opt &lt;[fast|normal]&gt;                    Specify optimization level<br> -v,--version                                Print version<br></code></pre></td></tr></table></figure><h4 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h4><p>目前dedx自带有少量的测试集（非常少），方便冒烟测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gradle -q runTest<br></code></pre></td></tr></table></figure><h4 id="使用生成的class文件"><a href="#使用生成的class文件" class="headerlink" title="使用生成的class文件"></a>使用生成的class文件</h4><p>调用dedx，会在指定的output位置生成对应的class文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dedx -o /path/to/output /project_path/resource/Base.dex<br></code></pre></td></tr></table></figure><p>然后可以通过反射调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; defineClass(String name, <span class="hljs-keyword">byte</span>[] bytes) &#123;<br>        <span class="hljs-keyword">return</span> defineClass(name, bytes, <span class="hljs-number">0</span>, bytes.length);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ExampleLoader loader = <span class="hljs-keyword">new</span> ExampleLoader();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;/path/to/Base.class&quot;</span>));<br>            Class baseClass = loader.defineClass(<span class="hljs-string">&quot;com.test.Base&quot;</span>, bytes);<br>            Method addInt = baseClass.getMethod(<span class="hljs-string">&quot;addInt&quot;</span>, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>            <span class="hljs-keyword">assert</span> (Integer) addInt.invoke(<span class="hljs-keyword">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) == <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>目前会在log中统计生成的函数的成功数量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">record</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">date</span>&gt;</span>2019-12-04T22:54:23<span class="hljs-tag">&lt;/<span class="hljs-name">date</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">millis</span>&gt;</span>1575471263304<span class="hljs-tag">&lt;/<span class="hljs-name">millis</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">sequence</span>&gt;</span>19961<span class="hljs-tag">&lt;/<span class="hljs-name">sequence</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span>&gt;</span>com.dedx.tools.MainKt<span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>com.dedx.tools.MainKt<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span>runMain<span class="hljs-tag">&lt;/<span class="hljs-name">method</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thread</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">thread</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>All method success/fail: 11826/1512<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">record</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试效果，成功率超过88%。这当中包含了包括Android SDK和一些常用的第三方SDK（如zxing）。</p><p>后续计划包含三部分：</p><ul><li>修复各种bug；</li><li>在生成的JvmInst结构上进行指令优化（类型推断、消除冗余指令）；</li><li>将JvmInst进行格式化dump，便于调试使用。</li></ul><p>当前稳定tag为0.0.2,。master分支不保证编译和冒烟测试成功。</p><p>欢迎感兴趣的童鞋一起参与。</p>]]></content>
    
    
    <categories>
      
      <category>Open Source Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>bytecode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于try-with-resources不知道的事</title>
    <link href="/2019/06/19/try_with_resources/"/>
    <url>/2019/06/19/try_with_resources/</url>
    
    <content type="html"><![CDATA[<h3 id="谁来背锅"><a href="#谁来背锅" class="headerlink" title="谁来背锅"></a>谁来背锅</h3><p>try-with-resource是Java 1.7中新增的，来打开资源，而无需手动关闭语法糖。官方介绍如下：</p><blockquote><p>The try-with-resources statement is a try statement that declares one or more resources.<br>A resource is an object that must be closed after the program is finished with it.<br>The try-with-resources statement ensures that each resource is closed at the end of the statement.<br>Any object that implements java.lang.AutoCloseable, which includes all objects which implement java.io.Closeable, can be used as a resource.</p></blockquote><p>还十分贴心的贴上了说明代码<span id="more"></span></p><blockquote><p>The following example reads the first line from a file. It uses an instance of BufferedReader to read data from the file. BufferedReader is a resource that must be closed after the program is finished with it:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readFirstLineFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>In this example, the resource declared in the try-with-resources statement is a BufferedReader. The declaration statement appears within parentheses immediately after the try keyword. The class BufferedReader, in Java SE 7 and later, implements the interface java.lang.AutoCloseable. Because the BufferedReader instance is declared in a try-with-resource statement, it will be closed regardless of whether the try statement completes normally or abruptly (as a result of the method BufferedReader.readLine throwing an IOException).</p><p>Prior to Java SE 7, you can use a finally block to ensure that a resource is closed regardless of whether the try statement completes normally or abruptly. The following example uses a finally block instead of a try-with-resources statement:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readFirstLineFromFileWithFinallyBlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>尤其是最后那句</p><blockquote><p>The following example uses a finally block instead of a try-with-resources statement</p></blockquote><p>让我误以为这两条代码是完全等价的。</p><h3 id="由soot而来的疑惑"><a href="#由soot而来的疑惑" class="headerlink" title="由soot而来的疑惑"></a>由soot而来的疑惑</h3><p>一个简单的例子</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>flogger<span class="token punctuation">.</span></span><span class="token class-name">FluentLogger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">FluentLogger</span> logger <span class="token operator">=</span> <span class="token class-name">FluentLogger</span><span class="token punctuation">.</span><span class="token function">forEnclosingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">finalTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contant<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> outFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> contant<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">atSevere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Out file: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>按照文档中的例子，close函数等价于在finally中执行，也就是说在exception block执行完成之后</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里执行</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Out file: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 或者这里执行</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然而它生成的jimple</p><div class="code-wrapper"><pre class="line-numbers language-jimple" data-language="jimple"><code class="language-jimple">public static void finalTest(java.lang.String, java.lang.String[])&#123;    ...    ... label08:    if $r8 &#x3D;&#x3D; null goto label13;    if r32 &#x3D;&#x3D; null goto label12; label09:    virtualinvoke $r8.&lt;java.io.FileOutputStream: void close()&gt;(); label10:    goto label13; label11:    $r23 :&#x3D; @caughtexception;    virtualinvoke r32.&lt;java.lang.Throwable: void addSuppressed(java.lang.Throwable)&gt;($r23);    goto label13; label12:    virtualinvoke $r8.&lt;java.io.FileOutputStream: void close()&gt;(); label13:    throw $r21;...    ... label15: &#x2F;&#x2F; exception label    $r10 :&#x3D; @caughtexception;    $r11 &#x3D; &lt;com.sbrella.test.FinalTest: com.google.common.flogger.FluentLogger logger&gt;;    $r12 &#x3D; virtualinvoke $r11.&lt;com.google.common.flogger.FluentLogger: com.google.common.flogger.LoggingApi atSevere()&gt;();    $r13 &#x3D; (com.google.common.flogger.FluentLogger$Api) $r12;    $r14 &#x3D; interfaceinvoke $r13.&lt;com.google.common.flogger.FluentLogger$Api: com.google.common.flogger.LoggingApi withCause(java.lang.Throwable)&gt;($r10);    $r15 &#x3D; (com.google.common.flogger.FluentLogger$Api) $r14;    interfaceinvoke $r15.&lt;com.google.common.flogger.FluentLogger$Api: void log()&gt;(); label16:    $r17 &#x3D; &lt;java.lang.System: java.io.PrintStream out&gt;;    $r16 &#x3D; new java.lang.StringBuilder;    specialinvoke $r16.&lt;java.lang.StringBuilder: void &lt;init&gt;()&gt;();    $r18 &#x3D; virtualinvoke $r16.&lt;java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)&gt;(&quot;Out file: &quot;);    $r19 &#x3D; virtualinvoke $r18.&lt;java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)&gt;(r0);    $r20 &#x3D; virtualinvoke $r19.&lt;java.lang.StringBuilder: java.lang.String toString()&gt;();    virtualinvoke $r17.&lt;java.io.PrintStream: void println(java.lang.String)&gt;($r20);    goto label19; label17:    $r25 :&#x3D; @caughtexception; label18:    $r27 &#x3D; &lt;java.lang.System: java.io.PrintStream out&gt;;    $r26 &#x3D; new java.lang.StringBuilder;    specialinvoke $r26.&lt;java.lang.StringBuilder: void &lt;init&gt;()&gt;();    $r28 &#x3D; virtualinvoke $r26.&lt;java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)&gt;(&quot;Out file: &quot;);    $r29 &#x3D; virtualinvoke $r28.&lt;java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)&gt;(r0);    $r30 &#x3D; virtualinvoke $r29.&lt;java.lang.StringBuilder: java.lang.String toString()&gt;();    virtualinvoke $r27.&lt;java.io.PrintStream: void println(java.lang.String)&gt;($r30);    throw $r25; label19:    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>只有一个exception label，且没有任何跳转。也就是说在exception执行完之后直接执行finally中的println，然后便退出了。</p><p>那close呢，在exception之前就执行了。</p><h3 id="Bytecode的答案"><a href="#Bytecode的答案" class="headerlink" title="Bytecode的答案"></a>Bytecode的答案</h3><p>要知道真正的执行顺序自然是到class文件中寻找答案，直接看bytecode</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">public static void finalTest(java.lang.String, java.lang.String[]);  descriptor: (Ljava&#x2F;lang&#x2F;String;[Ljava&#x2F;lang&#x2F;String;)V  flags: ACC_PUBLIC, ACC_STATIC  Code:    stack&#x3D;3, locals&#x3D;12, args_size&#x3D;2...      ...      49: invokevirtual #9                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;String.getBytes:()[B      52: invokevirtual #10                 &#x2F;&#x2F; write 函数触发异常 java&#x2F;io&#x2F;FileOutputStream.write:([B)V      55: iinc          7, 1      58: goto          32      61: aload_3      62: ifnull        142      65: aload         4      67: ifnull        89      70: aload_3      71: invokevirtual #11                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;FileOutputStream.close:()V      74: goto          142      77: astore        5      79: aload         4      81: aload         5      83: invokevirtual #13                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Throwable.addSuppressed:(Ljava&#x2F;lang&#x2F;Throwable;)V      86: goto          142      89: aload_3      90: invokevirtual #11                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;FileOutputStream.close:()V      93: goto          142      96: astore        5      &#x2F;&#x2F; 根据exception table，write的异常跳转到这里      98: aload         5     100: astore        4     102: aload         5     104: athrow      &#x2F;&#x2F; throw 一个异常在并跳转到105     105: astore        9     107: aload_3            &#x2F;&#x2F; 取出FileOutputStream     108: ifnull        139     111: aload         4         &#x2F;&#x2F; 4中保存的是Exception变量     113: ifnull        135     116: aload_3     117: invokevirtual #11                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;FileOutputStream.close:()V     120: goto          139     123: astore        10     125: aload         4     127: aload         10     129: invokevirtual #13                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Throwable.addSuppressed:(Ljava&#x2F;lang&#x2F;Throwable;)V     132: goto          139     135: aload_3     136: invokevirtual #11                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;FileOutputStream.close:()V     139: aload         9     141: athrow      &#x2F;&#x2F; 最终在这里再次throw     142: getstatic     #14                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;     145: new           #15                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;StringBuilder     148: dup     149: invokespecial #16                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V     152: ldc           #17                 &#x2F;&#x2F; String Out file:     154: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;     157: aload_0     158: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;     161: invokevirtual #19                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;     164: invokevirtual #20                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V     167: goto          252     170: astore_3      &#x2F;&#x2F; 由于是IOException，在这里被捕获     171: getstatic     #22                 &#x2F;&#x2F; Field logger:Lcom&#x2F;google&#x2F;common&#x2F;flogger&#x2F;FluentLogger;     174: invokevirtual #23                 &#x2F;&#x2F; Method com&#x2F;google&#x2F;common&#x2F;flogger&#x2F;FluentLogger.atSevere:()Lcom&#x2F;google&#x2F;common&#x2F;flogger&#x2F;LoggingApi;     177: checkcast     #24                 &#x2F;&#x2F; class com&#x2F;google&#x2F;common&#x2F;flogger&#x2F;FluentLogger$Api     180: aload_3     181: invokeinterface #25,  2           &#x2F;&#x2F; InterfaceMethod com&#x2F;google&#x2F;common&#x2F;flogger&#x2F;FluentLogger$Api.withCause:(Ljava&#x2F;lang&#x2F;Throwable;)Lcom&#x2F;google&#x2F;common&#x2F;flogger&#x2F;LoggingApi;     186: checkcast     #24                 &#x2F;&#x2F; class com&#x2F;google&#x2F;common&#x2F;flogger&#x2F;FluentLogger$Api     189: invokeinterface #26,  1           &#x2F;&#x2F; InterfaceMethod com&#x2F;google&#x2F;common&#x2F;flogger&#x2F;FluentLogger$Api.log:()V     194: getstatic     #14                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;     197: new           #15                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;StringBuilder     200: dup     201: invokespecial #16                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V     204: ldc           #17                 &#x2F;&#x2F; String Out file:     206: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;     209: aload_0     210: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;     213: invokevirtual #19                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;     216: invokevirtual #20                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V     219: goto          252     222: astore        11     224: getstatic     #14                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;     227: new           #15                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;StringBuilder     230: dup     231: invokespecial #16                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V     234: ldc           #17                 &#x2F;&#x2F; String Out file:     236: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;     239: aload_0     240: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;     243: invokevirtual #19                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;     246: invokevirtual #20                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V     249: aload         11     251: athrow     252: return    Exception table:       from    to  target type          70    74    77   Class java&#x2F;lang&#x2F;Throwable          21    61    96   Class java&#x2F;lang&#x2F;Throwable          21    61   105   any         116   120   123   Class java&#x2F;lang&#x2F;Throwable          96   107   105   any           9   142   170   Class java&#x2F;io&#x2F;IOException           9   142   222   any         170   194   222   any         222   224   222   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>直接假设write函数触发IOException，模拟执行一下。</p><p>从Exception Table中看到，write函数的异常会去往96的astore指令，然后在104通过指令athrow触发异常并去往105。局部变量表中第3个保存的就是FileOutputStream的this指针，通过aload_3获取并判断是否为null，4中保存的是catch到的Exception，是否为null。如果this指针不为空则调用close函数。之后会在141重新throw，由于该Exception是IOException，所以会被170处捕获，也就是进入了Java源代码中的exception block。</p><p>根据上述的执行流程，更接近于以下的Java代码：</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">finalTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contant<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> outFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> contant<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>os <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">atSevere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Out file: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>注意os.close()本身也是会throw IOException。根据Exception Table，bytecode中117处的那次close调用如果触发异常则会跳转到123，调用addSuppressed进行追加。</p><p>针对这种情况可以做一个简单的验证</p><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resource</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Resource</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行后打印的结果</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">java.lang.RuntimeException: mainat Main.main(Main.java:4)Suppressed: java.lang.RuntimeException: Resourceat Resource.close(Resource.java:4)at Main.main(Main.java:5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>文档链接</p><p><a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bytecode</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typescript remote debug</title>
    <link href="/2018/12/24/Typescript-remote-debug/"/>
    <url>/2018/12/24/Typescript-remote-debug/</url>
    
    <content type="html"><![CDATA[<p>远端借助nodemon以调试模式启动ts-node</p><span id="more"></span><p>配置如下</p><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;start:debug&quot;</span>: <span class="hljs-string">&quot;nodemon --config nodemon-debug.json&quot;</span>,<br>   &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>nodemon-debug.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;watch&quot;</span>: [<br>    <span class="hljs-string">&quot;src&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;ext&quot;</span>: <span class="hljs-string">&quot;ts&quot;</span>,<br>  <span class="hljs-attr">&quot;ignore&quot;</span>: [<span class="hljs-string">&quot;src/**/*.spec.ts&quot;</span>],<br>  <span class="hljs-attr">&quot;exec&quot;</span>: <span class="hljs-string">&quot;node --inspect=0.0.0.0 --require ts-node/register src/main.ts&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>compilerOptions中添加</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;inlineSourceMap&quot;</span>: <span class="hljs-literal">true</span>,<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run start:debug<br></code></pre></td></tr></table></figure><p>即可</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debug</tag>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLVM Pass从添加到执行的过程</title>
    <link href="/2018/04/14/LLVM-Pass-add-process/"/>
    <url>/2018/04/14/LLVM-Pass-add-process/</url>
    
    <content type="html"><![CDATA[<h2 id="clang的过渡"><a href="#clang的过渡" class="headerlink" title="clang的过渡"></a>clang的过渡</h2><p>要想搞清楚Pass添加和执行的过程首先要清楚如何从编译前段的clang过渡到LLVM。</p><p>当AST构建完成之后交给ASTConsumer的子类BackendConsumer处理。首先将会通过CodeGenerator来完成从AST到IR的转换。转换完成之后调用HandleTranslationUnit <span id="more"></span></p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">EmbedBitcode(getModule(), CodeGenOpts, llvm::MemoryBufferRef());EmitBackendOutput(Diags, HeaderSearchOpts, CodeGenOpts, TargetOpts,                  LangOpts, C.getTargetInfo().getDataLayout(),                  getModule(), Action, std::move(AsmOutStream));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这里会调用两个函数，EmbedBitcode用于处理 -fembed-bitcode 参数，目的是用于在生成的obj文件中增加一个用于存放bitcode的section。</p><p>EmitBackendOutput定义位于BackendUtil.cpp中。函数中会定义一个AsmHelper，并且调用EmitAssembly或者EmitAssemblyWithNewPassManager</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">if (CGOpts.ExperimentalNewPassManager)  AsmHelper.EmitAssemblyWithNewPassManager(Action, std::move(OS));else  AsmHelper.EmitAssembly(Action, std::move(OS));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>BackendUtil.cpp文件仍然位于clang中，但是这里离LLVM已经相当接近了</p><p>重点看EmitAssembly</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">legacy::PassManager PerModulePasses;PerModulePasses.add(    createTargetTransformInfoWrapperPass(getTargetIRAnalysis()));legacy::FunctionPassManager PerFunctionPasses(TheModule);PerFunctionPasses.add(    createTargetTransformInfoWrapperPass(getTargetIRAnalysis()));CreatePasses(PerModulePasses, PerFunctionPasses);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这里生成两个PassManager，一个管理ModulePass，一个管理FunctionPass。CreatePasses中完成两个PassManager队与Pass的添加管理。</p><p>除了PerModulePasses和PerFunctionPasses之外还有一个CodeGenPasses，根据CodeGenOpts的编译要求来添加用于指令转换、生成的Pass</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">legacy::PassManager CodeGenPasses;CodeGenPasses.add(    createTargetTransformInfoWrapperPass(getTargetIRAnalysis()));std::unique_ptr&lt;raw_fd_ostream&gt; ThinLinkOS;switch (Action) &#123;case Backend_EmitNothing:  break;case Backend_EmitBC:  if (CodeGenOpts.EmitSummaryIndex) &#123;    if (!CodeGenOpts.ThinLinkBitcodeFile.empty()) &#123;      std::error_code EC;      ThinLinkOS.reset(new llvm::raw_fd_ostream(          CodeGenOpts.ThinLinkBitcodeFile, EC,          llvm::sys::fs::F_None));      if (EC) &#123;        Diags.Report(diag::err_fe_unable_to_open_output) &lt;&lt; CodeGenOpts.ThinLinkBitcodeFile                                                         &lt;&lt; EC.message();        return;      &#125;    &#125;    PerModulePasses.add(        createWriteThinLTOBitcodePass(*OS, ThinLinkOS.get()));  &#125;  else    PerModulePasses.add(        createBitcodeWriterPass(*OS, CodeGenOpts.EmitLLVMUseLists));  break;case Backend_EmitLL:  PerModulePasses.add(      createPrintModulePass(*OS, &quot;&quot;, CodeGenOpts.EmitLLVMUseLists));  break;default:  if (!AddEmitPasses(CodeGenPasses, Action, *OS))    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>当Pass添加完成就开始逐个启动</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#123;  PrettyStackTraceString CrashInfo(&quot;Per-function optimization&quot;);  PerFunctionPasses.doInitialization();  for (Function &amp;F : *TheModule)    if (!F.isDeclaration())      PerFunctionPasses.run(F);  PerFunctionPasses.doFinalization();&#125;&#123;  PrettyStackTraceString CrashInfo(&quot;Per-module optimization passes&quot;);  PerModulePasses.run(*TheModule);&#125;&#123;  PrettyStackTraceString CrashInfo(&quot;Code generation&quot;);  CodeGenPasses.run(*TheModule);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>当Pass开始执行也就正式进入LLVM代码的范畴，执行完成后再返回到clang。</p><h2 id="PassManagerBuilder与addExtension"><a href="#PassManagerBuilder与addExtension" class="headerlink" title="PassManagerBuilder与addExtension"></a>PassManagerBuilder与addExtension</h2><p>回头再看CreatePasses中的内容，首先是有一个将PassManagerBuilder与LangOptions和CGOpts封装在一起的wrapper</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; We need this wrapper to access LangOpts and CGOpts from extension functions&#x2F;&#x2F; that we add to the PassManagerBuilder.class PassManagerBuilderWrapper : public PassManagerBuilder &#123;public:  PassManagerBuilderWrapper(const Triple &amp;TargetTriple,                            const CodeGenOptions &amp;CGOpts,                            const LangOptions &amp;LangOpts)      : PassManagerBuilder(), TargetTriple(TargetTriple), CGOpts(CGOpts),        LangOpts(LangOpts) &#123;&#125;  const Triple &amp;getTargetTriple() const &#123; return TargetTriple; &#125;  const CodeGenOptions &amp;getCGOpts() const &#123; return CGOpts; &#125;  const LangOptions &amp;getLangOpts() const &#123; return LangOpts; &#125;private:  const Triple &amp;TargetTriple;  const CodeGenOptions &amp;CGOpts;  const LangOptions &amp;LangOpts;&#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>CreatePasses函数中做的首要事情就是生成一个PassManagerBuilder并将CGOpts和LangOpts中的内容绑定到一起</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">PassManagerBuilderWrapper PMBuilder(TargetTriple, CodeGenOpts, LangOpts);&#x2F;&#x2F; At O0 and O1 we only run the always inliner which is more efficient. At&#x2F;&#x2F; higher optimization levels we run the normal inliner.if (CodeGenOpts.OptimizationLevel &lt;&#x3D; 1) &#123;  bool InsertLifetimeIntrinsics &#x3D; (CodeGenOpts.OptimizationLevel !&#x3D; 0 &amp;&amp;                                   !CodeGenOpts.DisableLifetimeMarkers);  PMBuilder.Inliner &#x3D; createAlwaysInlinerLegacyPass(InsertLifetimeIntrinsics);&#125; else &#123;  &#x2F;&#x2F; We do not want to inline hot callsites for SamplePGO module-summary build  &#x2F;&#x2F; because profile annotation will happen again in ThinLTO backend, and we  &#x2F;&#x2F; want the IR of the hot path to match the profile.  PMBuilder.Inliner &#x3D; createFunctionInliningPass(      CodeGenOpts.OptimizationLevel, CodeGenOpts.OptimizeSize,      (!CodeGenOpts.SampleProfileFile.empty() &amp;&amp;       CodeGenOpts.EmitSummaryIndex));&#125;PMBuilder.OptLevel &#x3D; CodeGenOpts.OptimizationLevel;PMBuilder.SizeLevel &#x3D; CodeGenOpts.OptimizeSize;PMBuilder.SLPVectorize &#x3D; CodeGenOpts.VectorizeSLP;PMBuilder.LoopVectorize &#x3D; CodeGenOpts.VectorizeLoop;PMBuilder.DisableUnrollLoops &#x3D; !CodeGenOpts.UnrollLoops;PMBuilder.MergeFunctions &#x3D; CodeGenOpts.MergeFunctions;PMBuilder.PrepareForThinLTO &#x3D; CodeGenOpts.EmitSummaryIndex;PMBuilder.PrepareForLTO &#x3D; CodeGenOpts.PrepareForLTO;PMBuilder.RerollLoops &#x3D; CodeGenOpts.RerollLoops;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后根据各种LangOpts和CodeGenOpts使用PassManagerBuilder的addExtension接口。</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">if (CodeGenOpts.DebugInfoForProfiling ||    !CodeGenOpts.SampleProfileFile.empty())  PMBuilder.addExtension(PassManagerBuilder::EP_EarlyAsPossible,                         addAddDiscriminatorsPass);...if (LangOpts.Sanitize.has(SanitizerKind::LocalBounds)) &#123;  PMBuilder.addExtension(PassManagerBuilder::EP_ScalarOptimizerLate,                         addBoundsCheckingPass);  PMBuilder.addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,                         addBoundsCheckingPass);&#125;...if (LangOpts.Sanitize.hasOneOf(SanitizerKind::Efficiency)) &#123;  PMBuilder.addExtension(PassManagerBuilder::EP_OptimizerLast,                         addEfficiencySanitizerPass);  PMBuilder.addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,                         addEfficiencySanitizerPass);&#125;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>addExtension接受的第一个参数是ExtensionPointTy类型，指定Pass插入的位置。ExtensionPointTy是一个enum，内容如下</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">enum ExtensionPointTy &#123;&#x2F;&#x2F;插入时机尽可能的早，允许在代码从前端出来后就被处理EP_EarlyAsPossible,&#x2F;&#x2F;在模块级优化前EP_ModuleOptimizerEarly,&#x2F;&#x2F;在循环优化后EP_LoopOptimizerEnd,&#x2F;&#x2F;允许插入优化pass在大多数主优化后，在clean-ish优化前EP_ScalarOptimizerLate,&#x2F;&#x2F;在最后EP_OptimizerLast,&#x2F;&#x2F;在vectorizer和其他更高级的平台指定优化之前EP_VectorizerStart,&#x2F;&#x2F;O0下位于inlining pass之后EP_EnabledOnOptLevel0,&#x2F;&#x2F;执行类似于与指令组合的窥孔优化（peephole optimizations），在指令组合pass的每个实例之后EP_Peephole,&#x2F;&#x2F;后期循环的规范化和简化这是最后一个循环优化管道，在循环删除前。&#x2F;&#x2F;必须是LoopPass的实例，加入到可以删除循环的地方，例如指定平台的循环方言识别EP_LateLoopOptimizations,&#x2F;&#x2F;通过CGPassManager增加CallGraphSCC pass在主CallGraphSCC pass之后，function simplification passe之前EP_CGSCCOptimizerLate,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>后一个参数为ExtensionFn</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef std::function&lt;void(const PassManagerBuilder &amp;Builder,                             legacy::PassManagerBase &amp;PM)&gt;      ExtensionFn;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>这个函数里主要调用了PassManager的add接口，将指定的Pass加入队列</p><p>PassManagerBuilder中有一个存放Pass添加函数的vector</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">std::vector&lt;std::pair&lt;ExtensionPointTy, ExtensionFn&gt;&gt; Extensions;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>addExtension就是将由ExtensionPointTy和ExtensionFn组成的pair添加到vector中</p><h2 id="Pass添加的最后一步"><a href="#Pass添加的最后一步" class="headerlink" title="Pass添加的最后一步"></a>Pass添加的最后一步</h2><p>在CreatePasses的最后，调用populate，完成从Extensions到PassManager的添加过程。</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">PMBuilder.populateFunctionPassManager(FPM);PMBuilder.populateModulePassManager(MPM);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>以populateModulePassManager为例</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void PassManagerBuilder::populateModulePassManager(    legacy::PassManagerBase &amp;MPM) &#123;      ...  &#x2F;&#x2F; If all optimizations are disabled, just run the always-inline pass and,  &#x2F;&#x2F; if enabled, the function merging pass.  if (OptLevel &#x3D;&#x3D; 0) &#123;    addPGOInstrPasses(MPM);    if (Inliner) &#123;      MPM.add(Inliner);      Inliner &#x3D; nullptr;    &#125;    &#x2F;&#x2F; FIXME: The BarrierNoopPass is a HACK! The inliner pass above implicitly    &#x2F;&#x2F; creates a CGSCC pass manager, but we don&#39;t want to add extensions into    &#x2F;&#x2F; that pass manager. To prevent this we insert a no-op module pass to reset    &#x2F;&#x2F; the pass manager to get the same behavior as EP_OptimizerLast in non-O0    &#x2F;&#x2F; builds. The function merging pass is    if (MergeFunctions)      MPM.add(createMergeFunctionsPass());    else if (GlobalExtensionsNotEmpty() || !Extensions.empty())      MPM.add(createBarrierNoopPass());    addExtensionsToPM(EP_EnabledOnOptLevel0, MPM);    &#x2F;&#x2F; Rename anon globals to be able to export them in the summary.    &#x2F;&#x2F; This has to be done after we add the extensions to the pass manager    &#x2F;&#x2F; as there could be passes (e.g. Adddress sanitizer) which introduce    &#x2F;&#x2F; new unnamed globals.    if (PrepareForThinLTO)      MPM.add(createNameAnonGlobalPass());    return;  &#125;  ...  ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>从Extension这个命令可以看出来，CreatePass更多的是为了将由CodeGenOpts和LangOpts参数指定的内容分类，而populate才是Pass最终进入执行队列的位置。接下来的代码也大致相同，根据OptLevel、LibraryInfo等信息直接调用add函数添加。</p><p>addExtensionsToPM就是将Extensions中的内容添加到PassManager的接口</p><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void PassManagerBuilder::addExtensionsToPM(ExtensionPointTy ETy,                                           legacy::PassManagerBase &amp;PM) const &#123;  if (GlobalExtensionsNotEmpty()) &#123;    for (auto &amp;Ext : *GlobalExtensions) &#123;      if (Ext.first &#x3D;&#x3D; ETy)        Ext.second(*this, PM);    &#125;  &#125;  for (unsigned i &#x3D; 0, e &#x3D; Extensions.size(); i !&#x3D; e; ++i)    if (Extensions[i].first &#x3D;&#x3D; ETy)      Extensions[i].second(*this, PM);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Pass的添加大致如此。</p>]]></content>
    
    
    <categories>
      
      <category>Compiler</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLVM</tag>
      
      <tag>Compiler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>赋值语句返回的原罪</title>
    <link href="/2018/03/27/return_by_assign/"/>
    <url>/2018/03/27/return_by_assign/</url>
    
    <content type="html"><![CDATA[<p>今天翻看王垠的Blog，有一篇引起了我的注意 <a href="http://www.yinwang.org/blog-cn/2013/04/16/yoda-notation">Yoda 表示法错在哪里</a> 。</p><p>其实这是一个古老的问题，用王垠的话讲这是一个典型的“先辈的罪”（Sins of our Forefathers）。我更愿意叫它“历史遗留问题”。<span id="more"></span></p><p>这个问题世界上任何一个写C++或者C的人都应该遇到过，当我需要使用“==”进行判断的时候少写了一个“=”，然后开始了漫长的、痛苦的Debug之路。老实说，我曾经有过至少5次这样的错误，最深刻的一回我可能排查了2个小时才搞定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (a = <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// WTF</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>后来，痛定思痛，我成为了Yoda写法的忠实践行者</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == a) &#123; <span class="hljs-comment">// looks like good</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>而当我工作之后，甚至很多情况下会故意写出这样的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (DeclStmt *DS = dyn_cast_or_not&lt;DeclStmt&gt;(S)) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>不得不说这种写法非常诱惑，一行代码解决了两行代码的问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (isa&lt;DeclStmt&gt;(S)) &#123;<br>    DeclStmt *DS = dyn_cast&lt;DeclStmt&gt;(S);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是同样不得不说的是，这样的写法确实从逻辑上讲是有问题的。这个问题的根源在于——<strong>为什么一条复制语句会拥有返回值？</strong></p><p>对应的反例，可以看看Rust中的赋值语句</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>程序的源代码是对内存状态的改变，赋值行为是一个具有特殊意义的行为，直接决定了程序的正确性。进行赋值操作的源代码，它的任何除赋值以外的效果都应该作为副作用被规避，以此来保证程序的正确性。</p><p>Rust中的赋值必然是一条语句，无法作为一个表达式，如此保证赋值行为的正确执行。但是很明显，C++中的赋值行为可以被定义为一个返回值有效的表达式。</p><p>可以从C++的AST中更加明显的看到这一点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( a = <span class="hljs-number">1</span> ) &#123;<br>    b = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> ( a == <span class="hljs-number">0</span> ) &#123;<br>    b = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于这样一段代码，clang生成的AST是这样的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">|-IfStmt <span class="hljs-number">0x9c0ba98</span> &lt;<span class="hljs-type">line</span>:<span class="hljs-number">5</span>:<span class="hljs-number">5</span>, <span class="hljs-type">line</span>:<span class="hljs-number">7</span>:<span class="hljs-number">5</span>&gt;                                       <br>| |-&lt;<span class="hljs-symbol">&lt;&lt;NULL&gt;&gt;</span>&gt;                                                                <br>| |-&lt;<span class="hljs-symbol">&lt;&lt;NULL&gt;&gt;</span>&gt;                                                                <br>| |-ImplicitCastExpr <span class="hljs-number">0x9c0ba20</span> &lt;<span class="hljs-type">line</span>:<span class="hljs-number">5</span>:<span class="hljs-number">10</span>, col:<span class="hljs-number">14</span>&gt; <span class="hljs-string">&#x27;_Bool&#x27;</span> &lt;IntegralToBoolean&gt;<br>| | `-ImplicitCastExpr <span class="hljs-number">0x9c0ba10</span> &lt;col:<span class="hljs-number">10</span>, col:<span class="hljs-number">14</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> &lt;LValueToRValue&gt;  <br>| |   `-BinaryOperator <span class="hljs-number">0x9c0b9f8</span> &lt;col:<span class="hljs-number">10</span>, col:<span class="hljs-number">14</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> lvalue <span class="hljs-string">&#x27;=&#x27;</span>            <br>| |     |-DeclRefExpr <span class="hljs-number">0x9c0b9c0</span> &lt;col:<span class="hljs-number">10</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> lvalue Var <span class="hljs-number">0x9c0b8e0</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;int&#x27;</span> <br>| |     `-IntegerLiteral <span class="hljs-number">0x9c0b9d8</span> &lt;col:<span class="hljs-number">14</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-number">1</span>                           <br>| |-CompoundStmt <span class="hljs-number">0x9c0ba80</span> &lt;col:<span class="hljs-number">18</span>, <span class="hljs-type">line</span>:<span class="hljs-number">7</span>:<span class="hljs-number">5</span>&gt;                                 <br>| | `-BinaryOperator <span class="hljs-number">0x9c0ba68</span> &lt;<span class="hljs-type">line</span>:<span class="hljs-number">6</span>:<span class="hljs-number">9</span>, col:<span class="hljs-number">13</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> lvalue <span class="hljs-string">&#x27;=&#x27;</span>            <br>| |   |-DeclRefExpr <span class="hljs-number">0x9c0ba30</span> &lt;col:<span class="hljs-number">9</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> lvalue Var <span class="hljs-number">0x9c0b958</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;int&#x27;</span>    <br>| |   `-IntegerLiteral <span class="hljs-number">0x9c0ba48</span> &lt;col:<span class="hljs-number">13</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-number">1</span>                             <br>| `-&lt;<span class="hljs-symbol">&lt;&lt;NULL&gt;&gt;</span>&gt;                                                                <br>|-IfStmt <span class="hljs-number">0x9c0bb80</span> &lt;<span class="hljs-type">line</span>:<span class="hljs-number">8</span>:<span class="hljs-number">5</span>, <span class="hljs-type">line</span>:<span class="hljs-number">10</span>:<span class="hljs-number">5</span>&gt;                                      <br>| |-&lt;<span class="hljs-symbol">&lt;&lt;NULL&gt;&gt;</span>&gt;                                                                <br>| |-&lt;<span class="hljs-symbol">&lt;&lt;NULL&gt;&gt;</span>&gt;                                                                <br>| |-BinaryOperator <span class="hljs-number">0x9c0bb00</span> &lt;<span class="hljs-type">line</span>:<span class="hljs-number">8</span>:<span class="hljs-number">10</span>, col:<span class="hljs-number">15</span>&gt; <span class="hljs-string">&#x27;_Bool&#x27;</span> <span class="hljs-string">&#x27;==&#x27;</span>                 <br>| | |-ImplicitCastExpr <span class="hljs-number">0x9c0baf0</span> &lt;col:<span class="hljs-number">10</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> &lt;LValueToRValue&gt;              <br>| | | `-DeclRefExpr <span class="hljs-number">0x9c0bab8</span> &lt;col:<span class="hljs-number">10</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> lvalue Var <span class="hljs-number">0x9c0b8e0</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;int&#x27;</span>   <br>| | `-IntegerLiteral <span class="hljs-number">0x9c0bad0</span> &lt;col:<span class="hljs-number">15</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-number">0</span>                               <br>| |-CompoundStmt <span class="hljs-number">0x9c0bb68</span> &lt;col:<span class="hljs-number">19</span>, <span class="hljs-type">line</span>:<span class="hljs-number">10</span>:<span class="hljs-number">5</span>&gt;                                <br>| | `-BinaryOperator <span class="hljs-number">0x9c0bb50</span> &lt;<span class="hljs-type">line</span>:<span class="hljs-number">9</span>:<span class="hljs-number">9</span>, col:<span class="hljs-number">13</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> lvalue <span class="hljs-string">&#x27;=&#x27;</span>            <br>| |   |-DeclRefExpr <span class="hljs-number">0x9c0bb18</span> &lt;col:<span class="hljs-number">9</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> lvalue Var <span class="hljs-number">0x9c0b958</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;int&#x27;</span>    <br>| |   `-IntegerLiteral <span class="hljs-number">0x9c0bb30</span> &lt;col:<span class="hljs-number">13</span>&gt; <span class="hljs-string">&#x27;int&#x27;</span> <span class="hljs-number">2</span>                             <br>| `-&lt;<span class="hljs-symbol">&lt;&lt;NULL&gt;&gt;</span>&gt;                                                                <br></code></pre></td></tr></table></figure><p>对比一下区别，“=”和“==”都是最为一个BinaryOperator的OpCode存在的。也就是说C++认为赋值行为和加减乘除相等这些都是一样的作为二元运算符存在的。事实上不单单是“==”，从OperationKinds.def中可以看到</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// [C++ 5.5] Pointer-to-member operators.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(PtrMemD, <span class="hljs-string">&quot;.*&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(PtrMemI, <span class="hljs-string">&quot;-&gt;*&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.5] Multiplicative operators.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Mul, <span class="hljs-string">&quot;*&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Div, <span class="hljs-string">&quot;/&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Rem, <span class="hljs-string">&quot;%&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.6] Additive operators.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Add, <span class="hljs-string">&quot;+&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Sub, <span class="hljs-string">&quot;-&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.7] Bitwise shift operators.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Shl, <span class="hljs-string">&quot;&lt;&lt;&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Shr, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.8] Relational operators.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(LT, <span class="hljs-string">&quot;&lt;&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(GT, <span class="hljs-string">&quot;&gt;&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(LE, <span class="hljs-string">&quot;&lt;=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(GE, <span class="hljs-string">&quot;&gt;=&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.9] Equality operators.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(EQ, <span class="hljs-string">&quot;==&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(NE, <span class="hljs-string">&quot;!=&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.10] Bitwise AND operator.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(And, <span class="hljs-string">&quot;&amp;&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.11] Bitwise XOR operator.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Xor, <span class="hljs-string">&quot;^&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.12] Bitwise OR operator.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Or, <span class="hljs-string">&quot;|&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.13] Logical AND operator.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(LAnd, <span class="hljs-string">&quot;&amp;&amp;&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.14] Logical OR operator.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(LOr, <span class="hljs-string">&quot;||&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.16] Assignment operators.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Assign, <span class="hljs-string">&quot;=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(MulAssign, <span class="hljs-string">&quot;*=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(DivAssign, <span class="hljs-string">&quot;/=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(RemAssign, <span class="hljs-string">&quot;%=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(AddAssign, <span class="hljs-string">&quot;+=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(SubAssign, <span class="hljs-string">&quot;-=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(ShlAssign, <span class="hljs-string">&quot;&lt;&lt;=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(ShrAssign, <span class="hljs-string">&quot;&gt;&gt;=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(AndAssign, <span class="hljs-string">&quot;&amp;=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(XorAssign, <span class="hljs-string">&quot;^=&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(OrAssign, <span class="hljs-string">&quot;|=&quot;</span>)</span></span><br><span class="hljs-comment">// [C99 6.5.17] Comma operator.</span><br><span class="hljs-function"><span class="hljs-title">BINARY_OPERATION</span><span class="hljs-params">(Comma, <span class="hljs-string">&quot;,&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>“*=”这些类似的符号也是类似的，考虑到“-”、“+”和“=”的位置关系，历史上应该也是有人在需要“==”时写出了这样的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (a -= <span class="hljs-number">1</span>) &#123;<br>    ...<br>&#125;<br><span class="hljs-keyword">if</span> (a += <span class="hljs-number">1</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>23333….</p><p>错误地没有将赋值行为与其他二元操作符区分开来是C++此类错误的元凶，不过我估计C++有可能是兼容了C（代码直接拿过来用了），至于C为什么会这样做，可能是因为那时的程序员水平都比较高，保证能写出正确的代码吧（很符合C++的设计哲学嘛）。</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++17 string_view</title>
    <link href="/2018/01/27/C-17-string-view/"/>
    <url>/2018/01/27/C-17-string-view/</url>
    
    <content type="html"><![CDATA[<h3 id="string-view"><a href="#string-view" class="headerlink" title="string_view"></a>string_view</h3><p>C++17的标准中，string_view是一个比较惊喜的东西，有机会用于字符串相关操作的优化。string_view的设计思路类似于slice，通过片段应用减少buffer的复制。<span id="more"></span></p><p>本质上讲是对char数据的引用</p><blockquote><p>The class template basic_string_view describes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.</p></blockquote><p>典型的实现仅包好两个成员：指向常量CharT的指针和长度。也就是说string_view本身不具有数据的拷贝。</p><p>string_view的操作函数与string基本一致。不过starts_with和ends_with这两个函数要等到C++20的时候才会实现。</p><p>string_view最大的优势就是对字符串的操作效率极高，一下代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string_view&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;chrono&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std::literals;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;              <br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> s = <span class="hljs-string">&quot;it is a test&quot;</span>sv;<br>    <span class="hljs-keyword">auto</span> s1 = <span class="hljs-string">&quot;it is a test&quot;</span>sv;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * cc = <span class="hljs-string">&quot;it is a test&quot;</span>;<br>    <span class="hljs-function">string_view <span class="hljs-title">s2</span><span class="hljs-params">(cc, <span class="hljs-number">12</span>)</span></span>;<br>    <span class="hljs-keyword">auto</span> str = <span class="hljs-string">&quot;it is a test&quot;</span>s;<br>    <span class="hljs-keyword">const</span> string str1 = <span class="hljs-string">&quot;it is a test&quot;</span>;<br>    <span class="hljs-function">string_view <span class="hljs-title">s3</span><span class="hljs-params">(&amp;str[<span class="hljs-number">0</span>], str.size())</span></span>;<br>    <span class="hljs-function">string_view <span class="hljs-title">s4</span><span class="hljs-params">(&amp;str1[<span class="hljs-number">0</span>], str1.size())</span></span>;<br>    <span class="hljs-keyword">auto</span> s5 = <span class="hljs-string">&quot;it is a test&quot;</span>sv;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> s6 = <span class="hljs-string">&quot;it is a test&quot;</span>sv;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> LEN = <span class="hljs-number">1000000</span>;<br><br>    chrono::steady_clock::time_point st1 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> st = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed1 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    chrono::steady_clock::time_point st2 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">auto</span> st = s1.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed2 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    chrono::steady_clock::time_point st3 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">auto</span> st = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed3 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    chrono::steady_clock::time_point st4 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> st = str1.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed4 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    chrono::steady_clock::time_point st5 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">auto</span> st = s2.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed5 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    chrono::steady_clock::time_point st6 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">auto</span> st = s3.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed6 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    chrono::steady_clock::time_point st7 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">auto</span> st = s4.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed7 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    chrono::steady_clock::time_point st8 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">auto</span> st = s5.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed8 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    chrono::steady_clock::time_point st9 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; LEN; i++) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> st = s6.<span class="hljs-built_in">substr</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>    chrono::steady_clock::time_point ed9 = chrono::steady_clock::<span class="hljs-built_in">now</span>();<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;constexpr sv time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed1 - st1).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;sv time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed2 - st2).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;s time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed3 - st3).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;const s time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed4 - st4).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;sv-char time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed5 - st5).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;sv-s time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed6 - st6).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;sv-const s s time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed7 - st7).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;sv time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed8 - st8).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;const sv time &quot;</span> &lt;&lt; chrono::duration_cast&lt;chrono::microseconds&gt;(ed9 - st9).<span class="hljs-built_in">count</span>() &lt;&lt; <span class="hljs-string">&quot;us.\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在GCC7.1 C++17下的执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">constexpr sv time 0us.<br>sv time 0us.<br>s time 9036us.<br>const s time 9478us.<br>sv-char time 0us.<br>sv-s time 563us.<br>sv-const s s time 543us.<br>sv time 0us.<br>const sv time 0us.<br></code></pre></td></tr></table></figure><p>可以看到string_view操作字面量的话基本不消耗时间，而对于引用string变量进行操作减少了将近20倍的耗时，可以说效果拔群。</p><p>不过当前clang对于string_view的支持似乎还没有跟上，基本与string一致。不同版本的GCC差距也比较明显，要使用的话还是要考虑编译环境问题。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链接与符号</title>
    <link href="/2018/01/22/link_and_symbol/"/>
    <url>/2018/01/22/link_and_symbol/</url>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接的本质就是把多个不同编译单元（目标文件）相互整合到一起。整合的方式是通过地址的确定。</p><p>从单个编译单元的角度看，自己内部的声明可以按有无定义分为两类。对于有定义的一类，程序执行时自然可以定位地址完成相应操作，也就是地址是已知的。对于无定义的一类，由于是采用的外部的函数或者全局变量，地址是未知的，链接就是给未知的地址进行定位。<span id="more"></span></p><p>在链接中统称函数和变量为符号，链接过程就是以符号为依据进行地址定位。</p><p>__静态链接__：单个编译单元中的引用在未连接前地址设置为0，链接时依据重定位表进行重定位</p><p>__动态链接__：将从动态共享对象中的引用标记为一个动态链接符号（链接时同样需要动态库参与，为了使用动态库的符号表确定哪个引用为动态链接符号）。执行时动态链接器与动态库都被映射到进程地址空间</p><h3 id="LLVM-IR-链接符号"><a href="#LLVM-IR-链接符号" class="headerlink" title="LLVM IR 链接符号"></a>LLVM IR 链接符号</h3><p>具体的链接类型在IR阶段表现的更加彻底。这些都是通过源码的各种关键字（如：static，extern），声明定义方式（是否是引用）在IR中进行成显性的表示。</p><p>下面内容来自llvm文档 <a href="https://llvm.org/docs/LangRef.html#linkage-types">https://llvm.org/docs/LangRef.html#linkage-types</a></p><p>所有全局变量和函数都有一种下列链接类型</p><p><strong>private</strong></p><p>只能被当前模块的对象直接访问。成为__private__的一个可能原因是为了避免重命名后的冲突。模块中的私有符号的所有引用都可以被更新，而这不会出现在任何目标文件的符号表中。</p><p><strong>internal</strong></p><p>与__private__相似，但是会作为一个local符号（比如ELF中STB_LOCAL）加入到目标文件符号表中。这个概念类似于C语言中static关键字。</p><p><strong>available_externally</strong></p><p>有__available_externally__关键字的全局变量将不会被输出到模块对应的目标文件中。从链接情况看，这相当于external声明。为了给内联和优化的发生提供外部模块全局变量的基础。__available_externally__的全局变量允许被随意丢弃、内联和优化，只可用于definitions，不可用于declarations。</p><p><strong>linkonce</strong></p><p>链接发生时将与其他同名全局变量合并。这个用于实现内联、模板或者其他必须在每个使用到它的编译单元都生成的代码，但是在之后可能被更明确的定义所覆盖。没有被引用的__linkonce__变量可以被丢弃。注意__linkonce__实际上不允许优化将函数主体内联到调用者中，因为它无法确定该定义是否是最终定义或者会不会被更明确的定义覆盖。使用__linkonce_odr__可使用内联或其他优化。</p><p><strong>weak</strong></p><p>__weak__拥有与__linkonce__相似的合并语义，不同的是没有引用的变量无法被丢弃。用于C源码中声明为”weak”的全局变量。</p><p><strong>common</strong></p><p>与__weak__类似，但在C中通常用于全局领域暂定的定义，比如”int x;”。拥有__common__的符号采用与__weak__同样的方式合并，并且没有引用也不会被删除。__common__可能没有一个明确的段，必须有0初始化，并且可能不会被记为’constant’。函数和别名可能不被记为__common__。</p><p><strong>appending</strong></p><p>仅被用于指向数组类型的全局指针。当两个__appending__一起链接的时候，这两个全局变量会被附加在一起。这是LLVM类型安全，等价于当.o文件被链接时让系统链接器在段中将同名附加到一起。不幸的是这与任何特性都不相符，所以仅能用于专门的LLVM解释器比如”llvm.global_ctors”</p><p><strong>extern_weak</strong></p><p>该链接的语义遵循ELF目标文件模型：符号在链接之前是weak，如果没有被链接，这个符号就变成了空，而不是一个未定义的引用。</p><p><strong>linkonce_odr</strong>, <strong>weak_odr</strong></p><p>一些语言允许不同的全局变量被合并，比如两个不同语义的函数。其他语言，比如C++，确保只有相同的全局变量被合并（one definition rule – ODR）。可以使用这两种linkage类型来说明只有相同才被合并。其他内容与不加odr的相同。</p><p><strong>external</strong></p><p>如果没有使用上述符号，说明全局可见，参与链接并可被用于解析外部符号。</p><h3 id="关于强弱符号"><a href="#关于强弱符号" class="headerlink" title="关于强弱符号"></a>关于强弱符号</h3><p>默认函数和初始化的全局变量为强符号，未初始化以及明确声明属性为weak的全局变量为弱符号。</p><p>强符号不允许多次定义；强符号覆盖弱符号；若没有强符号以占用空间最大的弱符号为准。</p><p>当符号全为弱符号且可能出现的类型不同时，单个编译单元无法确定符号大小。</p><p>common块的目的就是为了存放未确定最终大小的全局变量（可能被覆盖）。等最终链接完成还是会被存放到.BSS段</p><p>直接导致需要COMMON机制的原因是编译器和链接器允许不同类型的弱符号存在，但最本质的原因还是链接器不支持符号类型，即无法判断各个符号的类型是否一致。（《程序员的自我修养》P112）</p><p>BSS段存放（未初始化或者初始化值为0）的（全局变量和局部静态变量）。BSS段长度由段表保存，符号则由符号表保存，只有记录不占据磁盘空间，加载后占据内存空间</p><p>有些编译器会将全局的未初始化变量存放在BSS，有些不存放只预留一个未定义的全局变量符号。</p><p>当全局变量初始为0时，尽管为强符号，但是放在BSS段，不占据磁盘空间。</p><p>全局变量未初始化，值为0，在common段，加载时确定大小，然后放入BSS段。</p><p>note：当变量不在common段时，为强符号，也就是说弱符号等价于在common段。</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
      <tag>链接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLDB与Python</title>
    <link href="/2018/01/11/LLDB_and_Python/"/>
    <url>/2018/01/11/LLDB_and_Python/</url>
    
    <content type="html"><![CDATA[<h3 id="加入Python模块"><a href="#加入Python模块" class="headerlink" title="加入Python模块"></a>加入Python模块</h3><p>首先获取lldb的python模块路径</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lldb -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>在Python的site-packages路径下加入.pth文件，比如Extra.pth</p><p>将模块路径写入文件即可<span id="more"></span></p><h3 id="非command中运行"><a href="#非command中运行" class="headerlink" title="非command中运行"></a>非command中运行</h3><p>可以直接通过接口获得一个调试器的实例</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">lldb<span class="token punctuation">.</span>debugger <span class="token operator">=</span> lldb<span class="token punctuation">.</span>SBDebugger<span class="token punctuation">.</span>Create<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>lldb.py提供的基本接口有以下几种：</p><p><strong>lldb.SBDebugger</strong> ： 代表调试器实例的类，拥有命令行解析和所有调试目标</p><p><strong>lldb.SBTarget</strong> ： 代表当前调试目标</p><p><strong>lldb.SBProcess</strong> ： 代表当前调试目标的执行进程，管理进程并且可访问全部内存空间</p><p><strong>lldb.SBThread</strong> ： 代表当前选择的线程，并且管理全部栈帧。及时当前Target停止仍然可以被选择</p><p><strong>lldb.SBFrame</strong> ： 代表某一栈帧，管理所属的局部变量和寄存器快照</p><p>在 <a href="https://lldb.llvm.org/python-reference.html">https://lldb.llvm.org/python-reference.html</a> 的最后有一个Python脚本使用lldb反汇编程序的例子</p><div class="code-wrapper"><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#!&#x2F;usr&#x2F;bin&#x2F;pythonimport lldbimport osdef disassemble_instructions(insts):    for i in insts:        print i# Set the path to the executable to debugexe &#x3D; &quot;.&#x2F;a.out&quot;# Create a new debugger instancedebugger &#x3D; lldb.SBDebugger.Create()# When we step or continue, don&#39;t return from the function until the process # stops. Otherwise we would have to handle the process events ourselves which, while doable is#a little tricky.  We do this by setting the async mode to false.debugger.SetAsync (False)# Create a target from a file and archprint &quot;Creating a target for &#39;%s&#39;&quot; % exetarget &#x3D; debugger.CreateTargetWithFileAndArch (exe, lldb.LLDB_ARCH_DEFAULT)if target:    # If the target is valid set a breakpoint at main    main_bp &#x3D; target.BreakpointCreateByName (&quot;main&quot;, target.GetExecutable().GetFilename());    print main_bp    # Launch the process. Since we specified synchronous mode, we won&#39;t return    # from this function until we hit the breakpoint at main    process &#x3D; target.LaunchSimple (None, None, os.getcwd())        # Make sure the launch went ok    if process:        # Print some simple process info        state &#x3D; process.GetState ()        print process        if state &#x3D;&#x3D; lldb.eStateStopped:            # Get the first thread            thread &#x3D; process.GetThreadAtIndex (0)            if thread:                # Print some simple thread info                print thread                # Get the first frame                frame &#x3D; thread.GetFrameAtIndex (0)                if frame:                    # Print some simple frame info                    print frame                    function &#x3D; frame.GetFunction()                    # See if we have debug info (a function)                    if function:                        # We do have a function, print some info for the function                        print function                        # Now get all instructions for this function and print them                        insts &#x3D; function.GetInstructions(target)                        disassemble_instructions (insts)                    else:                        # See if we have a symbol in the symbol table for where we stopped                        symbol &#x3D; frame.GetSymbol();                        if symbol:                            # We do have a symbol, print some info for the symbol                            print symbol<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>可以看出这些主要类的相互调用关系</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>在lldb的command中的可以实现回调，比如当某个断点命中时自动执行函数</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> breakpoint <span class="token builtin class-name">set</span> --func-regex <span class="token operator">&lt;</span>regular-expression<span class="token operator">></span><span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> breakpoint <span class="token builtin class-name">command</span> <span class="token function">add</span> -s python <span class="token number">1</span>Enter your Python command<span class="token punctuation">(</span>s<span class="token punctuation">)</span>. Type <span class="token string">'DONE'</span> to end.def <span class="token keyword">function</span> <span class="token punctuation">(</span>frame, bp_loc, internal_dict<span class="token punctuation">)</span>:    <span class="token string">""</span>"frame: the lldb.SBFrame <span class="token keyword">for</span> the location at <span class="token function">which</span> you stopped       bp_loc: an lldb.SBBreakpointLocation <span class="token keyword">for</span> the breakpoint location information       internal_dict: an LLDB support object not to be used<span class="token string">""</span>"    name <span class="token operator">=</span> frame.GetFunctionName<span class="token punctuation">(</span><span class="token punctuation">)</span>    print <span class="token string">"function name: %s"</span> % name    <span class="token builtin class-name">return</span> False    DONE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>函数的返回值决定是否将控制权还给用户，返回False则不还给用户继续执行，返回其他包括None则暂停</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Process <span class="token number">2447</span> launched: <span class="token string">'/Users/penguin/Test/a.out'</span> <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span><span class="token keyword">function</span> name: func100<span class="token keyword">function</span> name: c1009Process <span class="token number">2447</span> exited with status <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span>0x00000000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="CUSTOM-STEPPING-LOGIC"><a href="#CUSTOM-STEPPING-LOGIC" class="headerlink" title="CUSTOM STEPPING LOGIC"></a>CUSTOM STEPPING LOGIC</h3><p>这是一个比较深奥复杂的功能。lldb的step是由一个“thread plans”的栈驱动的。每当有step的动作出现，就有一个新的plan被压入栈中，完成后被弹出。</p><p>当plan入栈后，lldb会通过“询问”该plan来决定一些功能，比如是否中断，“询问”的方式是调用约定的接口，常用的接口如下</p><p><strong>should_step</strong>:</p><p>栈底的plan是stepping控制器，意味着当进程暂停时该plan被询问是否自由的执行(running freely)，或者在当前线程单步(instruction-single-step)</p><p> <strong>explains_stop</strong> :</p><p>每个plan都会被询问，第一个声明这个stop的获得处理权利。例如在该地址有一个断点，如果脚本explains这个stop，并且should_stop返回false，这个断点将被跳过，因为处理权归脚本，而脚本不中断。这也是为什么step-over返回控制权的原因，因为它的explains一直返回false</p><p><strong>should_stop</strong>:</p><p>a) 确定是否完成工作。如果完成那么通过调用SetPlanComplete来指示</p><p>b) 通过返回True或者False来确定是否将控制权交给用户</p><p>c) 如果没有完成，将建立任何需要的机器在下次thread继续的时候，False情况下设置SetPlanComplete为False会exit当前thread</p><p><strong>is_stale</strong>:</p><p>轮询完成不管是否停下或者什么都没做，所有的plans将被访问is_stale，如果是他们将从栈中被弹出</p><p>以文档的中 <a href="http://llvm.org/svn/llvm-project/lldb/trunk/examples/python/scripted_step.py">http://llvm.org/svn/llvm-project/lldb/trunk/examples/python/scripted_step.py</a> 第一个SimpleStep为例，这里加入输出，来观察执行状态</p><div class="code-wrapper"><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">class SimpleStep:    def __init__(self, thread_plan, dict):        self.thread_plan &#x3D; thread_plan        self.start_address &#x3D; thread_plan.GetThread().GetFrameAtIndex(0).GetPC()        print &quot;__init__ start_address:&quot;        print hex(self.start_address)    def explains_stop(self, event):        # We are stepping, so if we stop for any other reason, it isn&#39;t        # because of us.        print &#39;explains_stop&#39;        if self.thread_plan.GetThread().GetStopReason() &#x3D;&#x3D; lldb.eStopReasonTrace:            print &#39;true&#39;            return True        else:            return False    def should_stop(self, event):        print &#39;should_stop&#39;        cur_pc &#x3D; self.thread_plan.GetThread().GetFrameAtIndex(0).GetPC()        print hex(cur_pc)        if cur_pc &lt; self.start_address or cur_pc &gt;&#x3D; self.start_address + 20:            print &#39;true&#39;            self.thread_plan.SetPlanComplete(True)            return True        else:            print &#39;false&#39;            return False    def should_step(self):        print &#39;should_step&#39;        return True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行命令</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token builtin class-name">command</span> script <span class="token function">import</span> ~/script_step.py<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> thread step-scripted -C script_step.SimpleStep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>产生输出</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">__init__ start_address:0x100000f30should_stepshould_stop0x100000f31<span class="token boolean">false</span>should_stepexplains_stop<span class="token boolean">true</span>should_stop0x100000f34<span class="token boolean">false</span>should_stepexplains_stop<span class="token boolean">true</span>should_stop0x100000f38<span class="token boolean">false</span>should_stepexplains_stop<span class="token boolean">true</span>should_stop0x100000f3d<span class="token boolean">false</span>should_stepexplains_stop<span class="token boolean">true</span>should_stop0x100000f44<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>__should_step__返回True，所以之后都是单步执行（可以修改为False试试，程序跑飞了）</p><p>然后__explains_stop__宣布占据这个单步执行导致的中断</p><p>__should_stop__根据条件决定是否将程序的控制权交给user，直观的感受就是程序停下来了</p><h3 id="增加命令"><a href="#增加命令" class="headerlink" title="增加命令"></a>增加命令</h3><p>Python函数可以增加新的LLDB命令到命令解析器中，函数形式如下</p><div class="code-wrapper"><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def command_function(debugger, command, result, internal_dict):          &quot;&quot;&quot;This command takes a lot of options and does many fancy things&quot;&quot;&quot;              # Your code goes here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>第一个参数是debugger实例，第二个参数是命令参数，</p><p>第三个参数为__lldb.SBCommandReturnObjec__类型，包含命令执行结果信息</p><p>最后是嵌入的脚本的集合</p><p>也可以使用Python类实现命令添加</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CommandObjectType</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> debugger<span class="token punctuation">,</span> session_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        this call should initialize the command <span class="token keyword">with</span> respect to the command interpreter <span class="token keyword">for</span> the passed<span class="token operator">-</span><span class="token keyword">in</span> debugger     <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> debugger<span class="token punctuation">,</span> command<span class="token punctuation">,</span> exe_ctx<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>         this <span class="token keyword">is</span> the actual bulk of the command<span class="token punctuation">,</span> akin to Python command functions    <span class="token keyword">def</span> <span class="token function">get_short_help</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         this call should <span class="token keyword">return</span> the short <span class="token builtin">help</span> text <span class="token keyword">for</span> this command<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_long_help</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         this call should <span class="token keyword">return</span> the <span class="token builtin">long</span> <span class="token builtin">help</span> text <span class="token keyword">for</span> this command<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>对于一个Python脚本，可以通过定义</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__lldb_init_module</span><span class="token punctuation">(</span>debugger<span class="token punctuation">,</span> internal_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Command Initialization code goes here</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>该函数在import时执行初始化</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ls</span><span class="token punctuation">(</span>debugger<span class="token punctuation">,</span> command<span class="token punctuation">,</span> result<span class="token punctuation">,</span> internal_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    ret <span class="token operator">=</span> commands<span class="token punctuation">.</span>getoutput<span class="token punctuation">(</span><span class="token string">'/bin/ls %s'</span> <span class="token operator">%</span> command<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token operator">>></span>result<span class="token punctuation">,</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token comment"># And the initialization code to add your commands </span><span class="token keyword">def</span> <span class="token function">__lldb_init_module</span><span class="token punctuation">(</span>debugger<span class="token punctuation">,</span> internal_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    debugger<span class="token punctuation">.</span>HandleCommand<span class="token punctuation">(</span><span class="token string">'command script add -f script_step.ls ls'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'The "ls" python command has been installed and is ready for use.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>如上述脚本，执行命令</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token builtin class-name">command</span> script <span class="token function">import</span> ~/script_step.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>就可以直接在LLDB中使用命令ls</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token function">ls</span> /ApplicationsLibraryNetworkSystem<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLDB</tag>
      
      <tag>Python</tag>
      
      <tag>Debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>replace_function_name</title>
    <link href="/2017/12/21/replace-function-name/"/>
    <url>/2017/12/21/replace-function-name/</url>
    
    <content type="html"><![CDATA[<p>replace_function_name是由一个完整的clang编译器，在CodeGen时通过修改CodeGenModule::getMangledName函数的流程来达到修改函数名的目的。</p><p>项目地址 <a href="https://github.com/penguin-wwy/replace_function_name">https://github.com/penguin-wwy/replace_function_name</a> </p><p>详细使用方式和效果对比请看github。</p><span id="more"></span><p>下面来分析实现过程。</p><p>首先看IR生成的过程。</p><p>clang::ParseAST是clang Parse的主要入口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clang::ParseAST</span><span class="hljs-params">(Sema &amp;S, <span class="hljs-keyword">bool</span> PrintStats, <span class="hljs-keyword">bool</span> SkipFunctionBodies)</span> </span>&#123;<br>  ...<br>  ASTConsumer *Consumer = &amp;S.<span class="hljs-built_in">getASTConsumer</span>();<br><br>  <span class="hljs-function">std::unique_ptr&lt;Parser&gt; <span class="hljs-title">ParseOP</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">new</span> Parser(S.getPreprocessor(), S, SkipFunctionBodies))</span></span>;<br>  Parser &amp;P = *ParseOP.<span class="hljs-built_in">get</span>();<br><br>  ...<br><br>  S.<span class="hljs-built_in">getPreprocessor</span>().<span class="hljs-built_in">EnterMainSourceFile</span>();<br>  P.<span class="hljs-built_in">Initialize</span>();<br><br>  Parser::DeclGroupPtrTy ADecl;<br>  ExternalASTSource *External = S.<span class="hljs-built_in">getASTContext</span>().<span class="hljs-built_in">getExternalSource</span>();<br>  <span class="hljs-keyword">if</span> (External)<br>    External-&gt;<span class="hljs-built_in">StartTranslationUnit</span>(Consumer);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">bool</span> AtEOF = P.<span class="hljs-built_in">ParseFirstTopLevelDecl</span>(ADecl); !AtEOF;<br>       AtEOF = P.<span class="hljs-built_in">ParseTopLevelDecl</span>(ADecl)) &#123;<br>    <span class="hljs-comment">// If we got a null return and something *was* parsed, ignore it.  This</span><br>    <span class="hljs-comment">// is due to a top-level semicolon, an action override, or a parse error</span><br>    <span class="hljs-comment">// skipping something.</span><br>    <span class="hljs-keyword">if</span> (ADecl &amp;&amp; !Consumer-&gt;<span class="hljs-built_in">HandleTopLevelDecl</span>(ADecl.<span class="hljs-built_in">get</span>()))<br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// Process any TopLevelDecls generated by #pragma weak.</span><br>  <span class="hljs-keyword">for</span> (Decl *D : S.<span class="hljs-built_in">WeakTopLevelDecls</span>())<br>    Consumer-&gt;<span class="hljs-built_in">HandleTopLevelDecl</span>(<span class="hljs-built_in">DeclGroupRef</span>(D));<br>  ...<br></code></pre></td></tr></table></figure><p>通过ParseTopLevelDecl接口，开始将源码分析生成AST。由于clang的词法分析Lex和Parse是一体的，所以这里也是词法分析的入口。</p><p>从这里获得AST之后进入HandleTopLevelDecl对AST进行处理。这里的consumer是BackendConsumer，HandleTopLevelDecl也只是一个计时的动作，主要是从这里进入CodeGeneratorImpl::HandleTopLevelDecl</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">HandleTopLevelDecl</span><span class="hljs-params">(DeclGroupRef D)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>      <span class="hljs-function">PrettyStackTraceDecl <span class="hljs-title">CrashInfo</span><span class="hljs-params">(*D.begin(), SourceLocation(),</span></span><br><span class="hljs-params"><span class="hljs-function">                                     Context-&gt;getSourceManager(),</span></span><br><span class="hljs-params"><span class="hljs-function">                                     <span class="hljs-string">&quot;LLVM IR generation of declaration&quot;</span>)</span></span>;<br><br>      <span class="hljs-comment">// Recurse.</span><br>      <span class="hljs-keyword">if</span> (llvm::TimePassesIsEnabled) &#123;<br>        LLVMIRGenerationRefCount += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (LLVMIRGenerationRefCount == <span class="hljs-number">1</span>)<br>          LLVMIRGeneration.<span class="hljs-built_in">startTimer</span>();<br>      &#125;<br><br>      Gen-&gt;<span class="hljs-built_in">HandleTopLevelDecl</span>(D);<br><br>      <span class="hljs-keyword">if</span> (llvm::TimePassesIsEnabled) &#123;<br>        LLVMIRGenerationRefCount -= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (LLVMIRGenerationRefCount == <span class="hljs-number">0</span>)<br>          LLVMIRGeneration.<span class="hljs-built_in">stopTimer</span>();<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后是迭代处理DeclGroupRef中的每一个Decl，EmitTopLevelDecl是具体Decl的转化入口。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// Make sure to emit all elements of a Decl.</span><br><span class="hljs-keyword">for</span> (DeclGroupRef::iterator I = DG.<span class="hljs-built_in">begin</span>(), E = DG.<span class="hljs-built_in">end</span>(); I != E; ++I)<br>  Builder-&gt;<span class="hljs-built_in">EmitTopLevelDecl</span>(*I);<br></code></pre></td></tr></table></figure><p>这里就正式进入了CodeGen模块的作用范畴，跟ParseAST就没有关系了。通过Consumer来完成不同功能的使用，看得出clang的设计十分清晰合理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CodeGenModule::EmitTopLevelDecl</span><span class="hljs-params">(Decl *D)</span> </span>&#123;<br>...<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (D-&gt;<span class="hljs-built_in">getKind</span>()) &#123;<br>  <span class="hljs-keyword">case</span> Decl::CXXConversion:<br>  <span class="hljs-keyword">case</span> Decl::CXXMethod:<br>  <span class="hljs-keyword">case</span> Decl::Function:<br>    <span class="hljs-comment">// Skip function templates</span><br>    <span class="hljs-keyword">if</span> (cast&lt;FunctionDecl&gt;(D)-&gt;<span class="hljs-built_in">getDescribedFunctionTemplate</span>() ||<br>        cast&lt;FunctionDecl&gt;(D)-&gt;<span class="hljs-built_in">isLateTemplateParsed</span>())<br>      <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-built_in">EmitGlobal</span>(cast&lt;FunctionDecl&gt;(D));<br>    <span class="hljs-comment">// Always provide some coverage mapping</span><br>    <span class="hljs-comment">// even for the functions that aren&#x27;t emitted.</span><br>    <span class="hljs-built_in">AddDeferredUnusedCoverageMapping</span>(D);<br>    <span class="hljs-keyword">break</span>;<br>    ...<br></code></pre></td></tr></table></figure><p>我们主要关注函数名生成所以看FunctionDecl的处理了。</p><p>在EmitTopLevelDecl中直接空降到函数体的处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// Defer code generation to first use when possible, e.g. if this is an inline</span><br><span class="hljs-comment">// function. If the global must always be emitted, do it eagerly if possible</span><br><span class="hljs-comment">// to benefit from cache locality.</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">MustBeEmitted</span>(Global) &amp;&amp; <span class="hljs-built_in">MayBeEmittedEagerly</span>(Global)) &#123;<br>  <span class="hljs-comment">// Emit the definition if it can&#x27;t be deferred.</span><br>  <span class="hljs-built_in">EmitGlobalDefinition</span>(GD);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>IR中的函数有define和declare前一种是定义，后一种对应声明，也就是从其他编译单元引用的函数，虽然函数体不在但是会进行函数声明。这里会选择define函数，declare函数会在其他编译单元转化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CodeGenModule::EmitGlobalDefinition</span><span class="hljs-params">(GlobalDecl GD, llvm::GlobalValue *GV)</span> </span>&#123;<br>  ...<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> *Method = dyn_cast&lt;CXXMethodDecl&gt;(D)) &#123;<br>      <span class="hljs-comment">// Make sure to emit the definition(s) before we emit the thunks.</span><br>      <span class="hljs-comment">// This is necessary for the generation of certain thunks.</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> *CD = dyn_cast&lt;CXXConstructorDecl&gt;(Method))<br>        ABI-&gt;<span class="hljs-built_in">emitCXXStructor</span>(CD, <span class="hljs-built_in">getFromCtorType</span>(GD.<span class="hljs-built_in">getCtorType</span>()));<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> *DD = dyn_cast&lt;CXXDestructorDecl&gt;(Method))<br>        ABI-&gt;<span class="hljs-built_in">emitCXXStructor</span>(DD, <span class="hljs-built_in">getFromDtorType</span>(GD.<span class="hljs-built_in">getDtorType</span>()));<br>      <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">EmitGlobalFunctionDefinition</span>(GD, GV);<br><br>      <span class="hljs-keyword">if</span> (Method-&gt;<span class="hljs-built_in">isVirtual</span>())<br>        <span class="hljs-built_in">getVTables</span>().<span class="hljs-built_in">EmitThunks</span>(GD);<br><br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>C++构造和析构函数会有单独的处理，其余函数不管是成员函数还是C风格函数都会进入EmitGlobalFunctionDefinition</p><p>EmitGlobalFunctionDefinition通过调用GetAddrOfFunction获取函数原型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">llvm::Constant *<span class="hljs-title">CodeGenModule::GetAddrOfFunction</span><span class="hljs-params">(GlobalDecl GD,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 llvm::Type *Ty,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 <span class="hljs-keyword">bool</span> ForVTable,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 <span class="hljs-keyword">bool</span> DontDefer,</span></span><br><span class="hljs-params"><span class="hljs-function">                                              ForDefinition_t IsForDefinition)</span> </span>&#123;<br>  <span class="hljs-comment">// If there was no specific requested type, just convert it now.</span><br>  <span class="hljs-keyword">if</span> (!Ty) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> *FD = cast&lt;FunctionDecl&gt;(GD.<span class="hljs-built_in">getDecl</span>());<br>    <span class="hljs-keyword">auto</span> CanonTy = Context.<span class="hljs-built_in">getCanonicalType</span>(FD-&gt;<span class="hljs-built_in">getType</span>());<br>    Ty = <span class="hljs-built_in">getTypes</span>().<span class="hljs-built_in">ConvertFunctionType</span>(CanonTy, FD);<br>  &#125;<br><br>  StringRef MangledName = <span class="hljs-built_in">getMangledName</span>(GD);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">GetOrCreateLLVMFunction</span>(MangledName, Ty, GD, ForVTable, DontDefer,<br>                                 <span class="hljs-comment">/*IsThunk=*/</span><span class="hljs-literal">false</span>, llvm::<span class="hljs-built_in">AttributeList</span>(),<br>                                 IsForDefinition);<br>&#125;<br></code></pre></td></tr></table></figure><p>getMangledName按照规则将函数的类名、函数名、返回值、参数、平衡栈方式、属性全部用于生成函数独一的函数名，到这里多态、重载这些高级特性统统落地，变成唯一的函数声明和函数调用。</p><p>值得注意的地方在于getMangledName函数中对于函数名会先到MangledDeclNames中去寻找是否已经生成过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">StringRef &amp;FoundStr = MangledDeclNames[CanonicalGD];<br>  <span class="hljs-keyword">if</span> (!FoundStr.<span class="hljs-built_in">empty</span>())<br>    <span class="hljs-keyword">return</span> FoundStr;<br></code></pre></td></tr></table></figure><p>同时在函数最后，也会将本次生成的函数名与全局变量的对应关系保存下来，用于下次查找</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> Result = Manglings.<span class="hljs-built_in">insert</span>(std::<span class="hljs-built_in">make_pair</span>(Str, GD));<br></code></pre></td></tr></table></figure><p>这里的Str变量就是最后保存的函数名，也就是IR中对该函数所使用的名称。只要我们此时将它修改，就完成了对于函数名的修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">auto</span> I = obfMap.<span class="hljs-built_in">begin</span>(); I != obfMap.<span class="hljs-built_in">end</span>(); I++ ) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">StringRef</span>(I-&gt;first) == Str) &#123;<br>        Str = <span class="hljs-built_in">StringRef</span>(I-&gt;second);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过一个字典保存需要替换函数名函数的MangledName，和它对应md5，我们就可以用md5完成对函数名的替换。-</p>]]></content>
    
    
    <categories>
      
      <category>Open Source Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLVM</tag>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码混淆——复杂度进化</title>
    <link href="/2017/12/18/code-obf3/"/>
    <url>/2017/12/18/code-obf3/</url>
    
    <content type="html"><![CDATA[<p>上一篇中我们对Armariris进行了一定的改进，主要在对体量较大的BasicBlock进行了切割，增加了一条从当前BasciBlock到它前驱的控制流，并且恒为假。</p><p>有两个比较明显的问题：</p><p>（1）分支判断过于简单；</p><p>（2）增加的只是一条控制流线，并没有增加程序块，所以程序复杂度上升的有限。</p><span id="more"></span><p>为了让程序的复杂度得以进化，本次就对上述两个问题进行修改。在OLLVM中（开源的混淆工具，Armariris就是它的魔改）采用了更复杂（或者叫完整）的虚假控制流。对于第一个问题我们采用之前介绍过的不透明谓词解决。而第二个问题需要完善虚假控制流，从原始的程序块中衍生出符合语法的程序块，并融入到整个程序的控制流中。</p><p>首先，在FunctionPass的入口函数中，加入虚假控制流的启动入口。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Flattening::runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> </span>&#123;<br>    Function *tmp = &amp;F;<br>    <span class="hljs-comment">// Do we obfuscate</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">toObfuscate</span>(flag, tmp, <span class="hljs-string">&quot;fla&quot;</span>) &amp;&amp; ((<span class="hljs-keyword">int</span>) llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">100</span>) &lt;= Percentage)) &#123;<br>        <span class="hljs-built_in">errs</span>() &lt;&lt; <span class="hljs-string">&quot;fla &quot;</span> + F.<span class="hljs-built_in">getName</span>() +<span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-built_in">addBougusControlFlow</span>(F);<span class="hljs-comment">//从这里给函数增加虚假控制流</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">flatten</span>(tmp)) &#123;<br>            ++Flattened;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先要解决的问题是，可以以哪些块作为原始块用于衍生虚假块。</p><p>还是和上次一样的，对于长度大于平均值的BasicBlock。我们将其切割，切割为上半部分和下半部分。以下半部分为基础，克隆出一个虚假的BasicBlock。然后在上半部分的最后加入流程控制语句，在下半部分的两个块中进行选择跳转。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Flattening::addBougusControlFlow</span><span class="hljs-params">(Function &amp;func)</span> </span>&#123;<br>    <span class="hljs-keyword">unsigned</span> average = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sumLength = <span class="hljs-number">0</span>;<br>    std::list&lt;BasicBlock *&gt; basicBlocks;<br>    <span class="hljs-keyword">for</span> ( Function::iterator I = func.<span class="hljs-built_in">begin</span>(); I != func.<span class="hljs-built_in">end</span>(); I++ ) &#123;<br>        <span class="hljs-keyword">if</span> ( I == func.<span class="hljs-built_in">begin</span>() ) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        sumLength += I-&gt;<span class="hljs-built_in">size</span>();<br>        basicBlocks.<span class="hljs-built_in">push_back</span>(&amp;*I);<br>    &#125;<br>    average = sumLength / func.<span class="hljs-built_in">size</span>();<br>    BasicBlock::iterator begin = func.<span class="hljs-built_in">begin</span>()-&gt;<span class="hljs-built_in">begin</span>();<br>    AllocaInst *randNum = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AllocaInst</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(func.<span class="hljs-built_in">getContext</span>()), <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, &amp;*begin);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strcmp</span>(begin-&gt;<span class="hljs-built_in">getOpcodeName</span>(), <span class="hljs-string">&quot;store&quot;</span>)) &#123;<br>        begin++;<br>    &#125;<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">StoreInst</span>(ConstantInt::<span class="hljs-built_in">get</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(func.<span class="hljs-built_in">getContext</span>()), llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>),<br>                  randNum, &amp;*begin);<br>    <span class="hljs-keyword">for</span> ( std::list&lt;BasicBlock *&gt;::iterator I = basicBlocks.<span class="hljs-built_in">begin</span>(); I != basicBlocks.<span class="hljs-built_in">end</span>(); I++ ) &#123;<br>        <span class="hljs-keyword">if</span> ( (*I)-&gt;<span class="hljs-built_in">size</span>() &gt; average ) &#123;<br>            <span class="hljs-built_in">addBogusFlow</span>(*I, func, randNum);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以在addBougusControlFlow中先做长度统计。这里函数的第一个BasicBlock不计入，因为这个部分往往是大量的alloca和store语句，用于对函数内部变量的初始化，虽然很长，内容很多，但是对于增加复杂度没有意义。对于符合要求的BasicBlock，调用addBogusFlow，进入下一步。randNum是在函数中由分配的一个新的变量。在高级语言中，我们声明并初始化一个变量只需要如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>但是在IR中，这个行为被分成两部分:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>第一条alloca指令，在函数栈帧上分配出一个32位int型的变量空间，align表示对齐。</p><p>第二条store表示将32位int型的立即数0，填入刚才分配的空间中，也就是初始化。</p><p>randNum的声明和初始化就需要一个AllocaInst和一个StoreInst。这个变量的作用是作为后面不透明谓词的操作数。</p><p>下面进入addBogusFlow函数</p><p>第一步是从BasicBlock的中间切割开</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">BasicBlock::iterator middle = basicBlock-&gt;<span class="hljs-built_in">end</span>();<br><span class="hljs-keyword">int</span> pos = basicBlock-&gt;<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span> (pos--) &#123;<br>    middle--;<br>&#125;<br>BasicBlock *realBlock = basicBlock-&gt;<span class="hljs-built_in">splitBasicBlock</span>(middle, <span class="hljs-string">&quot;RealBlock&quot;</span>);<br></code></pre></td></tr></table></figure><p>返回的后半部分作为realBlock存在，clone出一个alteredBlock</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">BasicBlock *alteredBlock = llvm::<span class="hljs-built_in">CloneBasicBlock</span>(realBlock, VMap, <span class="hljs-string">&quot;AlteredBlock&quot;</span>, &amp;func);<br></code></pre></td></tr></table></figure><p>然后需要修改原来的basicBlock的TerminatorInst，替换成一个选择跳转语句</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">TerminatorInst *end = basicBlock-&gt;<span class="hljs-built_in">getTerminator</span>();<br>LoadInst *loadInst = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LoadInst</span>(randNum, <span class="hljs-string">&quot;&quot;</span>, end);<span class="hljs-comment">//取出randNum</span><br>BinaryOperator *sub = BinaryOperator::<span class="hljs-built_in">Create</span>(Instruction::Sub, (Value *)loadInst,<br>                            ConstantInt::<span class="hljs-built_in">get</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(func.<span class="hljs-built_in">getContext</span>()), <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>),<br>                            <span class="hljs-string">&quot;&quot;</span>, end);<span class="hljs-comment">//randNum - 1</span><br>BinaryOperator *mul = BinaryOperator::<span class="hljs-built_in">Create</span>(Instruction::Mul, (Value *)loadInst, sub, <span class="hljs-string">&quot;&quot;</span>, end);<span class="hljs-comment">// randNum * (randNum - 1)</span><br>BinaryOperator *rem = BinaryOperator::<span class="hljs-built_in">Create</span>(Instruction::URem, mul,<br>                            ConstantInt::<span class="hljs-built_in">get</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(func.<span class="hljs-built_in">getContext</span>()), <span class="hljs-number">2</span>,<br>                                             <span class="hljs-literal">false</span>), <span class="hljs-string">&quot;&quot;</span>, end);<span class="hljs-comment">//randNum * (randNum - 1) % 2</span><br>ICmpInst *condition = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ICmpInst</span>(end, ICmpInst::ICMP_EQ, rem,<br>                         ConstantInt::<span class="hljs-built_in">get</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(func.<span class="hljs-built_in">getContext</span>()), <span class="hljs-number">0</span>,<br>                                          <span class="hljs-literal">false</span>));<br>BranchInst::<span class="hljs-built_in">Create</span>(realBlock, alteredBlock, (Value *)condition, basicBlock);<br>end-&gt;<span class="hljs-built_in">eraseFromParent</span>();<br></code></pre></td></tr></table></figure><p>如果要使用randNum，不能直接使用，要通过一条load指令从栈上取出。取出后构造一个简单的公式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">x * (x<span class="hljs-number">-1</span>) % <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>判断结果与0是否相等（当然相等），相等跳入realBlock，否则进入alteredBlock。</p><p>到这里跳转的问题就解决了，那么之后就是将alteredBlock进行改造，使他与realBlock不同，如果是两个相同的BasicBlock，那么上面增加的跳转就没有意义。</p><p>对于alteredBlock的修改我们可以在原有指令的基础上增加它的变形，要比凭空构造简单许多，也不容易出错。这里只针对BinaryOperator，也就是二元操作符进行修改.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++">Instruction::BinaryOps firstArray[<span class="hljs-number">13</span>] = &#123;Instruction::Xor, Instruction::Or, Instruction::And,<br>                                       Instruction::Add, Instruction::Sub, Instruction::Mul, Instruction::UDiv,<br>                                       Instruction::SDiv, Instruction::URem, Instruction::SRem, Instruction::Shl,<br>                                       Instruction::LShr, Instruction::AShr&#125;;<br><span class="hljs-keyword">if</span> ( opcode == Instruction::Add || opcode == Instruction::Sub ||<br>         opcode == Instruction::Mul || opcode == Instruction::UDiv ||<br>         opcode == Instruction::SDiv || opcode == Instruction::URem ||<br>         opcode == Instruction::SRem || opcode == Instruction::Shl ||<br>         opcode == Instruction::LShr || opcode == Instruction::AShr ||<br>         opcode == Instruction::And || opcode == Instruction::Or ||<br>         opcode == Instruction::Xor ) &#123;<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> random = (<span class="hljs-keyword">int</span>)llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">2</span>); random &lt; <span class="hljs-number">3</span>; random++ ) &#123;<br>            <span class="hljs-keyword">unsigned</span> randOp = llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">13</span>);<br>            <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> ( llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">4</span>) ) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    BinaryOperator::<span class="hljs-built_in">Create</span>(firstArray[randOp], I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">0</span>),<br>                                           I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">1</span>), I-&gt;<span class="hljs-built_in">getName</span>(), &amp;*I);<br>                    <span class="hljs-keyword">if</span> ( willDelete.<span class="hljs-built_in">find</span>(&amp;*I) == willDelete.<span class="hljs-built_in">end</span>() ) &#123;<br>                        willDelete.<span class="hljs-built_in">insert</span>(&amp;*I);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    BinaryOperator::<span class="hljs-built_in">Create</span>(firstArray[randOp], I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">0</span>),<br>                                           I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">1</span>), I-&gt;<span class="hljs-built_in">getName</span>(), &amp;*I);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    op = BinaryOperator::<span class="hljs-built_in">Create</span>(firstArray[randOp], I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">0</span>), I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">1</span>), <span class="hljs-string">&quot;&quot;</span>, &amp;*I);<br>                    BinaryOperator::<span class="hljs-built_in">Create</span>(firstArray[randOp], op, I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">1</span>), <span class="hljs-string">&quot;&quot;</span>, &amp;*I);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-keyword">if</span> ( op != <span class="hljs-literal">nullptr</span> )<br>                        BinaryOperator::<span class="hljs-built_in">Create</span>(firstArray[randOp], op, I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">1</span>), <span class="hljs-string">&quot;&quot;</span>, &amp;*I);<br>                    <span class="hljs-keyword">else</span><br>                        BinaryOperator::<span class="hljs-built_in">Create</span>(firstArray[randOp], I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">0</span>), I-&gt;<span class="hljs-built_in">getOperand</span>(<span class="hljs-number">1</span>), <span class="hljs-string">&quot;&quot;</span>, &amp;*I);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>首先是针对整数的计算，当确定操作符为整数计算符时，我们根据该指令，随机构造新的指令加入进来。除了整数计算还有浮点数计算，与之类似。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++">ICmpInst::Predicate ICmpPreArray[] = &#123;ICmpInst::ICMP_EQ, ICmpInst::ICMP_NE, ICmpInst::ICMP_UGT,<br>                                      ICmpInst::ICMP_UGE, ICmpInst::ICMP_ULE, ICmpInst::ICMP_ULT,<br>                                      ICmpInst::ICMP_SGE, ICmpInst::ICMP_SGT, ICmpInst::ICMP_SLE,<br>                                      ICmpInst::ICMP_SLT&#125;;<br><span class="hljs-keyword">if</span> ( opcode == Instruction::ICmp ) &#123;<br>    ICmpInst *currentI = (ICmpInst *) (&amp;I);<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">3</span>)) &#123; <span class="hljs-comment">// must be improved</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">//do nothing</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            currentI-&gt;<span class="hljs-built_in">swapOperands</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// randomly change the predicate</span><br>            currentI-&gt;<span class="hljs-built_in">setPredicate</span>(ICmpPreArray[llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">10</span>)]);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br>FCmpInst::Predicate FCmpPreArray[] = &#123;FCmpInst::FCMP_OEQ, FCmpInst::FCMP_ONE, FCmpInst::FCMP_UGE,<br>                                      FCmpInst::FCMP_UGT, FCmpInst::FCMP_ULE, FCmpInst::FCMP_ULT,<br>                                      FCmpInst::FCMP_OGE, FCmpInst::FCMP_OGT, FCmpInst::FCMP_OLT,<br>                                      FCmpInst::FCMP_OLE&#125;;<br><span class="hljs-keyword">if</span> ( opcode == Instruction::FCmp ) &#123;<br>    FCmpInst *currentI = (FCmpInst *) (&amp;I);<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">3</span>)) &#123; <span class="hljs-comment">// must be improved</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-comment">//do nothing</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            currentI-&gt;<span class="hljs-built_in">swapOperands</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">// randomly change the predicate</span><br>            currentI-&gt;<span class="hljs-built_in">setPredicate</span>(FCmpPreArray[llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">10</span>)]);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于条件判断语句，修改条件判断的谓词。</p><p>当然对于其他操作符也可以进行修改，偷个懒先不搞了。要做也很容易，调用LLVM的接口即可。</p><p>针对alteredBlock的修改，先看看效果</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">RealBlock<span class="hljs-number">2</span>:                                       <span class="hljs-comment">; preds = %36</span><br>  <span class="hljs-variable">%41</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%42</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%41</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%40</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%42</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%43</span><br></code></pre></td></tr></table></figure><p>这是realBlock,只有简单的四条语句</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">RealBlock<span class="hljs-number">2</span>AlteredBlock:                           <span class="hljs-comment">; No predecessors!</span><br>  <span class="hljs-variable">%66</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%67</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">urem</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%66</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%40</span><br>  <span class="hljs-variable">%68</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">ashr</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%66</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%40</span><br>  <span class="hljs-variable">%69</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%66</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%40</span><br>  <span class="hljs-variable">%70</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%69</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%40</span><br>  <span class="hljs-variable">%71</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%66</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%40</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%71</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%43</span><br></code></pre></td></tr></table></figure><p>这是衍生的alteredBlock，可以看到增加了多条指令。</p><p>然后对文件进行测试。</p><p>原始的IR函数</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">define</span> <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() <span class="hljs-variable">#0</span> &#123;<br>  ...<br><br><span class="hljs-comment">; &lt;label&gt;:13:                                     ; preds = %0</span><br>  <span class="hljs-variable">%14</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%15</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%15</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%16</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%16</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%21</span><br><br><span class="hljs-comment">; &lt;label&gt;:17:                                     ; preds = %0</span><br>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%19</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%20</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%19</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%20</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%21</span><br><br><span class="hljs-comment">; &lt;label&gt;:21:                                     ; preds = %17, %13</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%22</span><br><br><span class="hljs-comment">; &lt;label&gt;:22:                                     ; preds = %32, %21</span><br>  <span class="hljs-variable">%23</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%24</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">slt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%23</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-keyword">br</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%24</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%25</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%35</span><br><br><span class="hljs-comment">; &lt;label&gt;:25:                                     ; preds = %22</span><br>  <span class="hljs-variable">%26</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%27</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%28</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sub</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%26</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%27</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%28</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%29</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%30</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%31</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%30</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%29</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%31</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%32</span><br><br><span class="hljs-comment">; &lt;label&gt;:32:                                     ; preds = %25</span><br>  <span class="hljs-variable">%33</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%34</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%33</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%34</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%22</span><br><br><span class="hljs-comment">; &lt;label&gt;:35:                                     ; preds = %22</span><br>  <span class="hljs-variable">%36</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">switch</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%36</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%40</span> [<br>    <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%37</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%38</span><br>  ]<br><br><span class="hljs-comment">; &lt;label&gt;:37:                                     ; preds = %35</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%41</span><br><br><span class="hljs-comment">; &lt;label&gt;:38:                                     ; preds = %35</span><br>  <span class="hljs-variable">%39</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%39</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%41</span><br><br><span class="hljs-comment">; &lt;label&gt;:40:                                     ; preds = %35</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%41</span><br><br><span class="hljs-comment">; &lt;label&gt;:41:                                     ; preds = %40, %38, %37</span><br>  <span class="hljs-variable">%42</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%43</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">ne</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%42</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><br>  <span class="hljs-keyword">br</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%43</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%49</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%44</span><br><br><span class="hljs-comment">; &lt;label&gt;:44:                                     ; preds = %41</span><br>  <span class="hljs-variable">%45</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%46</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%45</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%46</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%47</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%48</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%47</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%48</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%49</span><br><br><span class="hljs-comment">; &lt;label&gt;:49:                                     ; preds = %44, %41</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>正好100行</p><p>加固后的IR函数</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">define</span> <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() <span class="hljs-variable">#0</span> &#123;<br>  ...<br><br>switchDefault:                                    <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">first:</span>                                            <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem</span><br>  <span class="hljs-variable">%.reload9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem8</span><br>  <span class="hljs-variable">%13</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">sgt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%.reload9</span><br>  <span class="hljs-variable">%14</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%13</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">420575174</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">997972431</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%14</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:15:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%16</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%16</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><br>  <span class="hljs-variable">%19</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sub</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%20</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">mul</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%19</span><br>  <span class="hljs-variable">%21</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">urem</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%20</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%22</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">eq</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%21</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><br>  <span class="hljs-variable">%23</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%22</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-439097710</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1781361060</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%23</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock:                                        <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%24</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%24</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-379256416</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:25:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%26</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%26</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%27</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%27</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem10</span><br>  <span class="hljs-variable">%28</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><br>  <span class="hljs-variable">%29</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sub</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%28</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%30</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">mul</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%28</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%29</span><br>  <span class="hljs-variable">%31</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">urem</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%30</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%32</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">eq</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%31</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><br>  <span class="hljs-variable">%33</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">1829204214</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1524008387</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%33</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock<span class="hljs-number">1</span>:                                       <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload15</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem10</span><br>  <span class="hljs-variable">%34</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload15</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%34</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-379256416</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:35:                                     ; preds = %loopEntry</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1775434091</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:36:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%37</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%38</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">slt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%37</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-variable">%39</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%38</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">577122341</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-754147452</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%39</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:40:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%41</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%42</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%43</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sub</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%41</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%42</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%43</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%10</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%44</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%10</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%44</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem16</span><br>  <span class="hljs-variable">%45</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><br>  <span class="hljs-variable">%46</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sub</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%45</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%47</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">mul</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%45</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%46</span><br>  <span class="hljs-variable">%48</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">urem</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%47</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%49</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">eq</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%48</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><br>  <span class="hljs-variable">%50</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%49</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-392282435</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1911983968</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%50</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock<span class="hljs-number">2</span>:                                       <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%51</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%.reload21</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem16</span><br>  <span class="hljs-variable">%52</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%51</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%.reload21</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%52</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1465792220</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:53:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%54</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%55</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%54</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%55</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem22</span><br>  <span class="hljs-variable">%56</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><br>  <span class="hljs-variable">%57</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sub</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%56</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%58</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">mul</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%56</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%57</span><br>  <span class="hljs-variable">%59</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">urem</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%58</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%60</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">eq</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%59</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><br>  <span class="hljs-variable">%61</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%60</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1156815832</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">1175436138</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%61</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock<span class="hljs-number">3</span>:                                       <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload24</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem22</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload24</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1775434091</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:62:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%63</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%63</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem25</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-778348989</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>NodeBlock:                                        <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload28</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem25</span><br>  <span class="hljs-variable">%Pivot</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">slt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload28</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-variable">%64</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%Pivot</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1489924166</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">1283611807</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%64</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>LeafBlock<span class="hljs-number">5</span>:                                       <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload26</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem25</span><br>  <span class="hljs-variable">%SwitchLeaf6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">eq</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload26</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-variable">%65</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%SwitchLeaf6</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">313440066</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">297950529</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%65</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>LeafBlock:                                        <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload27</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem25</span><br>  <span class="hljs-variable">%SwitchLeaf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">eq</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload27</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><br>  <span class="hljs-variable">%66</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%SwitchLeaf</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">1875124790</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">297950529</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%66</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:67:                                     ; preds = %loopEntry</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-2121542355</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:68:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%69</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%69</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-2121542355</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>NewDefault:                                       <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">1890410157</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:70:                                     ; preds = %loopEntry</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-2121542355</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:71:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%72</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%73</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">ne</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%72</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><br>  <span class="hljs-variable">%74</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%73</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1711396090</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">2070871614</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%74</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:75:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%76</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%77</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%76</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%77</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%78</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%78</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem29</span><br>  <span class="hljs-variable">%79</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><br>  <span class="hljs-variable">%80</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sub</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%79</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%81</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">mul</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%79</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%80</span><br>  <span class="hljs-variable">%82</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">urem</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%81</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%83</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">eq</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%82</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><br>  <span class="hljs-variable">%84</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%83</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-2103269463</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">2005576382</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%84</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock<span class="hljs-number">4</span>:                                       <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload34</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem29</span><br>  <span class="hljs-variable">%85</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload34</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%85</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1711396090</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:86:                                     ; preds = %loopEntry</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br><br>RealBlockAlteredBlock:                            <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%87</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%87</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-379256416</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock<span class="hljs-number">1</span>AlteredBlock:                           <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload13</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem10</span><br>  <span class="hljs-variable">%88</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sdiv</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload13</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%.reload12</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem10</span><br>  <span class="hljs-variable">%89</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">and</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload12</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%.reload11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem10</span><br>  <span class="hljs-variable">%90</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">and</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload11</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%91</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">and</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%90</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%.reload14</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem10</span><br>  <span class="hljs-variable">%92</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%92</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-379256416</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock<span class="hljs-number">2</span>AlteredBlock:                           <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%93</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%.reload19</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem16</span><br>  <span class="hljs-variable">%94</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">ashr</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%93</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%.reload19</span><br>  <span class="hljs-variable">%.reload18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem16</span><br>  <span class="hljs-variable">%95</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%93</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%.reload18</span><br>  <span class="hljs-variable">%.reload17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem16</span><br>  <span class="hljs-variable">%96</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%95</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%.reload17</span><br>  <span class="hljs-variable">%.reload20</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem16</span><br>  <span class="hljs-variable">%97</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%93</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%.reload20</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%97</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1465792220</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock<span class="hljs-number">3</span>AlteredBlock:                           <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload23</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem22</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload23</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1775434091</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>RealBlock<span class="hljs-number">4</span>AlteredBlock:                           <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload32</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem29</span><br>  <span class="hljs-variable">%98</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">xor</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload32</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%.reload31</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem29</span><br>  <span class="hljs-variable">%99</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">sub</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload31</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%.reload30</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem29</span><br>  <span class="hljs-variable">%100</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">udiv</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload30</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-variable">%.reload33</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem29</span><br>  <span class="hljs-variable">%101</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload33</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%101</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1711396090</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br>loopEnd:                                          <span class="hljs-comment">; preds = %RealBlock4AlteredBlock, %RealBlock3AlteredBlock, %RealBlock2AlteredBlock, %RealBlock1AlteredBlock, %RealBlockAlteredBlock, %RealBlock4, %75, %71, %70, %NewDefault, %68, %67, %LeafBlock, %LeafBlock5, %NodeBlock, %62, %RealBlock3, %53, %RealBlock2, %40, %36, %35, %RealBlock1, %25, %RealBlock, %15, %first, %switchDefault</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEntry</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我没有截全，很长，一共307行。也就是说函数规模变成原来的3倍。</p><p>编译一下丢IDA看看。</p><p>混淆前，程序主要流程是这样的</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/1111.png"></p><p>混淆后，由于我屏幕太小，只能截Graph overview</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/1112.png"></p><p>最后，代码已经同步到github</p><p><a href="https://github.com/penguin-wwy/Armariris">https://github.com/penguin-wwy/Armariris</a></p><p>有兴趣的小伙伴可以玩一玩</p><h4 id="over"><a href="#over" class="headerlink" title="over"></a>over</h4>]]></content>
    
    
    <categories>
      
      <category>代码混淆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLVM</tag>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码混淆——控制流扁平的开源实践和改进</title>
    <link href="/2017/11/28/code-obf2/"/>
    <url>/2017/11/28/code-obf2/</url>
    
    <content type="html"><![CDATA[<p>孤挺花（Armariris）: 由上海交通大学密码与计算机安全实验室维护的LLVM混淆框架，支持多平台、多语言。目前支持的功能主要有控制流混淆、指令替换、字符串加密。<a href="https://github.com/GoSSIP-SJTU/Armariris#armariris">https://github.com/GoSSIP-SJTU/Armariris#armariris</a></p><span id="more"></span><p>本文主要对Armariris的控制流混淆实现代码进行分析，了解Armariris的实现方式。并对混淆强度进行部分改进。</p><p>下面先看下混淆前后的对比</p><p>混淆前</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/dev.png"></p><p>混淆后</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/obf.png"></p><p>可以看到CFG的基本块变多了，控制流也变得复杂了。</p><p>Armariris脱胎于OLLVM，都是采用在LLVM中增加一个pass的方式来实现对源码的混淆处理。由于本身编译的混淆pass时静态库的形式存在的，不适合我们查看输出后的IR文件，也不适合调试，所以第一步我先对LLVM的编译方式进行修改。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs llvm">#add_llvm_library(LLVMObfuscation<br>#  CryptoUtils.cpp<br>#  StringObfuscation.cpp<br>#  Substitution.cpp<br>#  Flattening.cpp<br>#  Utils.cpp<br>#  )<br><br>#add_dependencies(LLVMObfuscation intrinsics_gen)<br><br>add_llvm_loadable_module( LLVMObfuscation<br>  CryptoUtils.cpp<br>  StringObfuscation.cpp<br>  Substitution.cpp<br>  Flattening.cpp<br>  Utils.cpp<br><br>  DEPENDS<br>  intrinsics_gen<br>  PLUGIN_TOOL<br>  opt<br>  )<br></code></pre></td></tr></table></figure><p>这是Armariris/lib/Transforms/Obfuscation路径下的cmake文件修改情况，如此一来我们就可以通过opt来load生成的LLVMObfuscation，单独进行混淆，而不必完成整个编译过程。</p><p>当然除了这个文件还需要修改一些LLVMBuild.txt和PassManager的cpp，解除原来静态库的依赖关系。这里就不详说了。</p><p>修改完成后进行编译就可以在编译好的lib文件夹下发现LLVMObfuscation.dylib，然后我们准备一个样例文件，long.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> Tom;<br>    <span class="hljs-keyword">int</span> Jerry;<br>    <span class="hljs-keyword">int</span> Dog;<br><br>    Jerry = <span class="hljs-number">7</span>;<br>    Dog = <span class="hljs-number">5</span>;<br>    Tom = Jerry ^ <span class="hljs-number">13</span>;<br>    <br>    <span class="hljs-keyword">if</span> ( Jerry &gt; Tom ) &#123;<br>        <span class="hljs-keyword">int</span> Cat;<br>        <span class="hljs-keyword">int</span> Mouse;<br>        <span class="hljs-keyword">int</span> Dog_;<br><br>        Cat = Jerry;<br>        Mouse = <span class="hljs-number">0</span>;<br>        Cat |= <span class="hljs-number">5</span>;<br>        Mouse |= <span class="hljs-number">6</span>;<br>        Cat += Mouse;<br>        Dog_ = Tom &gt; Cat ? Cat : Mouse;<br>        Cat = Dog_ + Mouse;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> &amp;eee = Dog;<br><br>    Tom = <span class="hljs-number">3</span>;<br>    Tom ^= (Dog + Jerry);<br>    Dog = Tom + Jerry;<br>    Dog += <span class="hljs-number">3</span>;<br>    Tom = Jerry | Dog;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在里面填入简单的代码。</p><p>然后依次执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -S -emit-llvm long.cpp -o long.ll<br><br>./bin/opt -load ./lib/LLVMObfuscation.dylib -flattening long.ll -o long.bc --<br><br></code></pre></td></tr></table></figure><p>第一步先用clang输出long.cpp的中间语言文件——long.ll</p><p>第二步通过opt加载LLVMObfuscation.dylib执行混淆，输出的是LLVM的bitcode文件，是二进制格式，通过相应的工具也可以转换成IR文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">llvm-dis long.bc -o long-ir.ll<br></code></pre></td></tr></table></figure><p>然后我们查看混淆前的long.ll和混淆后的long-ir.ll有什么区别</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; Function Attrs: noinline norecurse nounwind ssp uwtable</span><br><span class="hljs-keyword">define</span> <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span>*<span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">8</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">xor</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">13</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%10</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%12</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%13</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">sgt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%11</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%12</span><br>  <span class="hljs-keyword">br</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%13</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%14</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%35</span><br><br><span class="hljs-comment">; &lt;label&gt;:14:                                     ; preds = %0</span><br>  <span class="hljs-variable">%15</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%15</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%16</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%16</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%19</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-number">6</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%19</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%20</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%21</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%22</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%21</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%20</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%22</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%23</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%24</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%25</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">sgt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%23</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%24</span><br>  <span class="hljs-keyword">br</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%25</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%26</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%28</span><br><br><span class="hljs-comment">; &lt;label&gt;:26:                                     ; preds = %14</span><br>  <span class="hljs-variable">%27</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%30</span><br><br><span class="hljs-comment">; &lt;label&gt;:28:                                     ; preds = %14</span><br>  <span class="hljs-variable">%29</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%30</span><br><br><span class="hljs-comment">; &lt;label&gt;:30:                                     ; preds = %28, %26</span><br>  <span class="hljs-variable">%31</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">phi</span> <span class="hljs-type">i32</span> [ <span class="hljs-variable">%27</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%26</span> ]<span class="hljs-punctuation">,</span> [ <span class="hljs-variable">%29</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%28</span> ]<br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%31</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%32</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%33</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%34</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%32</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%33</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%34</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%35</span><br><br><span class="hljs-comment">; &lt;label&gt;:35:                                     ; preds = %30, %0</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>** <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">8</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%36</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%37</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%38</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%36</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%37</span><br>  <span class="hljs-variable">%39</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%40</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">xor</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%39</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%38</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%40</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%41</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%42</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%43</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%41</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%42</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%43</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%44</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%45</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%44</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%45</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%46</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%47</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%48</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%46</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%47</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%48</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>long.ll</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; Function Attrs: noinline norecurse nounwind ssp uwtable</span><br><span class="hljs-keyword">define</span> <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%.reg2mem2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><br>  <span class="hljs-variable">%.reg2mem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span>*<span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">8</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">xor</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%9</span><span class="hljs-punctuation">,</span> <span class="hljs-number">13</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%10</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%11</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem</span><br>  <span class="hljs-variable">%12</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%12</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem2</span><br>  <span class="hljs-variable">%switchVar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1905808842</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-variable">%.reg2mem4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEntry</span><br><br>loopEntry:                                        <span class="hljs-comment">; preds = %0, %loopEnd</span><br>  <span class="hljs-variable">%switchVar1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">switch</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%switchVar1</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%switchDefault</span> [<br>    <span class="hljs-type">i32</span> <span class="hljs-number">-1905808842</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%first</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">985277384</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%15</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">-162188989</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%28</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">-1992348767</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%30</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">-705746547</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%32</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">-1653362465</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%36</span><br>  ]<br><br>switchDefault:                                    <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">first:</span>                                            <span class="hljs-comment">; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem</span><br>  <span class="hljs-variable">%.reload3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem2</span><br>  <span class="hljs-variable">%13</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">sgt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%.reload3</span><br>  <span class="hljs-variable">%14</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%13</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">985277384</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1653362465</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%14</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:15:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%16</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%16</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%17</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%18</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%17</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%18</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%19</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%20</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%19</span><span class="hljs-punctuation">,</span> <span class="hljs-number">6</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%20</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%21</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%22</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%23</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%22</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%21</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%23</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%24</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%25</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%26</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">sgt</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%25</span><br>  <span class="hljs-variable">%27</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%26</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-162188989</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1992348767</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%27</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:28:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%29</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-705746547</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%29</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:30:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%31</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-705746547</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%31</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem4</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:32:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload5</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%33</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%34</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%6</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%35</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%33</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%34</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%35</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%5</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">-1653362465</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:36:                                     ; preds = %loopEntry</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>** <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">8</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%37</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%38</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%39</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%37</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%38</span><br>  <span class="hljs-variable">%40</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%41</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">xor</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%40</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%39</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%41</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%42</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%43</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%44</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%42</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%43</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%44</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%45</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%46</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%45</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%46</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%47</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%48</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%49</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%47</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%48</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%49</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br><br>loopEnd:                                          <span class="hljs-comment">; preds = %32, %30, %28, %15, %first, %switchDefault</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEntry</span><br>&#125;<br></code></pre></td></tr></table></figure><p>long-ir.ll</p><p>下面我们来分析Armariris的代码，看看它是如何实现的。控制流扁平化的伪算法在前一篇中已经介绍过了。当然由于实现方式方法有小小的不同，过程会略有差异，但是目标和大致过程都是相同的。</p><p>首先是入口函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Flattening::runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> </span>&#123;<br>    Function *tmp = &amp;F;<br><br>    <span class="hljs-comment">// Do we obfuscate</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">toObfuscate</span>(flag, tmp, <span class="hljs-string">&quot;fla&quot;</span>) &amp;&amp; ((<span class="hljs-keyword">int</span>) llvm::cryptoutils-&gt;<span class="hljs-built_in">get_range</span>(<span class="hljs-number">100</span>) &lt;= Percentage)) &#123;<br>        <span class="hljs-comment">//errs() &lt;&lt; &quot;fla &quot; + F.getName() +&quot;\n&quot;;</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">flatten</span>(tmp)) &#123;<br>            ++Flattened;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Flattening是执行的混淆的主要类，我们在混淆命令中加入的 -flattening 就是为了指定调用Flattening。</p><p>为什么说runOnFunction是入口函数呢，这是由Pass的调用过程决定的。首先，opt会生成PassManager。PassManager有一个成员PM</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/// PassManager manages ModulePassManagers</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PassManager</span> :</span> <span class="hljs-keyword">public</span> PassManagerBase &#123;<br><span class="hljs-keyword">public</span>:<br><br>  <span class="hljs-built_in">PassManager</span>();<br>  ~<span class="hljs-built_in">PassManager</span>() <span class="hljs-keyword">override</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Pass *P)</span> <span class="hljs-keyword">override</span></span>;<br><br>  <span class="hljs-comment">/// run - Execute all of the passes scheduled for execution.  Keep track of</span><br>  <span class="hljs-comment">/// whether any of the passes modifies the module, and if so, return true.</span><br>  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">run</span><span class="hljs-params">(Module &amp;M)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">/// PassManagerImpl_New is the actual class. PassManager is just the</span><br>  <span class="hljs-comment">/// wraper to publish simple pass manager interface</span><br>  PassManagerImpl *PM;<br>&#125;;<br></code></pre></td></tr></table></figure><p>PM是PassManagerImpl类型，主要的执行类，启动通过内部的run函数启动PassManagerImpl。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> Index = <span class="hljs-number">0</span>; Index &lt; <span class="hljs-built_in">getNumContainedManagers</span>(); ++Index) &#123;<br>    Changed |= <span class="hljs-built_in">getContainedManager</span>(Index)-&gt;<span class="hljs-built_in">runOnModule</span>(M);<br>    M.<span class="hljs-built_in">getContext</span>().<span class="hljs-built_in">yield</span>();<br>  &#125;<br></code></pre></td></tr></table></figure><p>PassManagerImpl会选择相对应的内容管理者。getContainedManager返回FunctionPass的管理者MPPassManager</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++">MPPassManager::<span class="hljs-built_in">runOnModule</span>(Module &amp;M) &#123;<br>  <span class="hljs-keyword">bool</span> Changed = <span class="hljs-literal">false</span>;<br><br>  ...<br><br>  <span class="hljs-comment">// Initialize module passes</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> Index = <span class="hljs-number">0</span>; Index &lt; <span class="hljs-built_in">getNumContainedPasses</span>(); ++Index)<br>    Changed |= <span class="hljs-built_in">getContainedPass</span>(Index)-&gt;<span class="hljs-built_in">doInitialization</span>(M);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> Index = <span class="hljs-number">0</span>; Index &lt; <span class="hljs-built_in">getNumContainedPasses</span>(); ++Index) &#123;<br>    ModulePass *MP = <span class="hljs-built_in">getContainedPass</span>(Index);<br>    ...<br>    &#123;<br>      <span class="hljs-function">PassManagerPrettyStackEntry <span class="hljs-title">X</span><span class="hljs-params">(MP, M)</span></span>;<br>      <span class="hljs-function">TimeRegion <span class="hljs-title">PassTimer</span><span class="hljs-params">(getPassTimer(MP))</span></span>;<br><br>      LocalChanged |= MP-&gt;<span class="hljs-built_in">runOnModule</span>(M);<br>    &#125;<br>    ...<br></code></pre></td></tr></table></figure><p>通过多态，MP选择FPPassManager::runOnModule进入下一步</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">FPPassManager::runOnModule</span><span class="hljs-params">(Module &amp;M)</span> </span>&#123;<br>  <span class="hljs-keyword">bool</span> Changed = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">for</span> (Function &amp;F : M)<br>    Changed |= <span class="hljs-built_in">runOnFunction</span>(F);<br><br>  <span class="hljs-keyword">return</span> Changed;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">FPPassManager::runOnFunction</span><span class="hljs-params">(Function &amp;F)</span> </span>&#123;<br>  ...<br><br>  <span class="hljs-comment">// 迭代取出每一个FunctionPass</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> Index = <span class="hljs-number">0</span>; Index &lt; <span class="hljs-built_in">getNumContainedPasses</span>(); ++Index) &#123;<br>    FunctionPass *FP = <span class="hljs-built_in">getContainedPass</span>(Index);<br>    ...<br><br>    &#123;<br>      <span class="hljs-function">PassManagerPrettyStackEntry <span class="hljs-title">X</span><span class="hljs-params">(FP, F)</span></span>;<br>      <span class="hljs-function">TimeRegion <span class="hljs-title">PassTimer</span><span class="hljs-params">(getPassTimer(FP))</span></span>;<br><br>      LocalChanged |= FP-&gt;<span class="hljs-built_in">runOnFunction</span>(F);<span class="hljs-comment">//调用每一个FunctionPass的runOnFunction</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>而Flattening也是继承于FunctionPass，所以runOnFunction也就成了Flattening的入口，从这里进入混淆函数flatten</p><p>到了这里，就正式进入了混淆的流程。我们先回顾一下上一篇代码混淆之道（二）中我们抽象出来的控制流扁平化算法：</p><p>标识符重命名（解决变量名冲突）——&gt;控制语句展开（全变成if）——&gt;变量声明提前——&gt;控制流压扁</p><p>在IR文件中，由于LLVM的IR是SSA（静态单赋值形式）形式的，标识符重命名和变量声明提前这两步可以省略。而第二步中的控制语句的展开，高级语言中的For、While等循环结构已经都变成了条件判断+Branch的形式，可以理解为通常所说的if-goto的方式。只有switch的方式还保存着，所以只需要将仍然保存的switch也改写成条件判断+br跳转的形式即可。从这里也可以看出在IR层进行混淆的好处，大量的工作前端在生成IR的同时已经由编译器帮我们搞定了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Flattening::flatten</span><span class="hljs-params">(Function *f)</span> </span>&#123;<br>    vector&lt;BasicBlock *&gt; origBB;<br>    BasicBlock *loopEntry;<br>    BasicBlock *loopEnd;<br>    LoadInst *load;<br>    SwitchInst *switchI;<br>    AllocaInst *switchVar;<br><br>    <span class="hljs-comment">// SCRAMBLER</span><br>    <span class="hljs-keyword">char</span> scrambling_key[<span class="hljs-number">16</span>];<br>    llvm::cryptoutils-&gt;<span class="hljs-built_in">get_bytes</span>(scrambling_key, <span class="hljs-number">16</span>);<br>    <span class="hljs-comment">// END OF SCRAMBLER</span><br><br>    <span class="hljs-comment">// Lower switch</span><br>    FunctionPass *lower = <span class="hljs-built_in">createLowerSwitchPass</span>();<br>    lower-&gt;<span class="hljs-built_in">runOnFunction</span>(*f);<br></code></pre></td></tr></table></figure><p>flatten函数开始的时候执行各种声明，并且调用LowerSwitchPass。这个pass负责将IR文件中目前仍然存在的switch结构转化成if结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// Save all original BB</span><br>    <span class="hljs-keyword">for</span> (Function::iterator i = f-&gt;<span class="hljs-built_in">begin</span>(); i != f-&gt;<span class="hljs-built_in">end</span>(); ++i) &#123;<br>        BasicBlock *tmp = &amp;*i;<br>        origBB.<span class="hljs-built_in">push_back</span>(tmp);<br><br>        BasicBlock *bb = &amp;*i;<br>        <span class="hljs-keyword">if</span> (isa&lt;InvokeInst&gt;(bb-&gt;<span class="hljs-built_in">getTerminator</span>())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Nothing to flatten</span><br>    <span class="hljs-keyword">if</span> (origBB.<span class="hljs-built_in">size</span>() &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Remove first BB</span><br>    origBB.<span class="hljs-built_in">erase</span>(origBB.<span class="hljs-built_in">begin</span>());<br></code></pre></td></tr></table></figure><p>origBB保存除第一个BasicBlock之外的所有BasicBlock。这里的BasicBlock就是IR层CFG的block，我们的FunctionPass所获得的Function都是以CFG的形式存在的。之所以第一个BasicBlock不保存是因为需要对它进行大刀阔斧的改动，包括分配用于switch判断的变量的内存和跳转如循环。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// If main begin with an if</span><br>    BranchInst *br = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (isa&lt;BranchInst&gt;(insert-&gt;<span class="hljs-built_in">getTerminator</span>())) &#123;<br>        br = cast&lt;BranchInst&gt;(insert-&gt;<span class="hljs-built_in">getTerminator</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((br != <span class="hljs-literal">NULL</span> &amp;&amp; br-&gt;<span class="hljs-built_in">isConditional</span>()) ||<br>        insert-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">getNumSuccessors</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>        BasicBlock::iterator i = insert-&gt;<span class="hljs-built_in">back</span>().<span class="hljs-built_in">getIterator</span>();<br><br>        <span class="hljs-keyword">if</span> (insert-&gt;<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>            i--;<br>        &#125;<br><br>        BasicBlock *tmpBB = insert-&gt;<span class="hljs-built_in">splitBasicBlock</span>(i, <span class="hljs-string">&quot;first&quot;</span>);<br>        origBB.<span class="hljs-built_in">insert</span>(origBB.<span class="hljs-built_in">begin</span>(), tmpBB);<br>    &#125;<br><br>    <span class="hljs-comment">// Remove jump</span><br>    insert-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">eraseFromParent</span>();<br></code></pre></td></tr></table></figure><p>将第一个块尾部的跳转内容（如果有的话）提取到一个新的BasicBlock中，并且放入到origBB中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// Create switch variable and set as it</span><br>    switchVar =<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">AllocaInst</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(f-&gt;<span class="hljs-built_in">getContext</span>()), <span class="hljs-number">0</span>, <span class="hljs-string">&quot;switchVar&quot;</span>, insert);<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">StoreInst</span>(<br>            ConstantInt::<span class="hljs-built_in">get</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(f-&gt;<span class="hljs-built_in">getContext</span>()),<br>                             llvm::cryptoutils-&gt;<span class="hljs-built_in">scramble32</span>(<span class="hljs-number">0</span>, scrambling_key)),<br>            switchVar, insert);<br><br>    <span class="hljs-comment">// Create main loop</span><br>    loopEntry = BasicBlock::<span class="hljs-built_in">Create</span>(f-&gt;<span class="hljs-built_in">getContext</span>(), <span class="hljs-string">&quot;loopEntry&quot;</span>, f, insert);<br>    loopEnd = BasicBlock::<span class="hljs-built_in">Create</span>(f-&gt;<span class="hljs-built_in">getContext</span>(), <span class="hljs-string">&quot;loopEnd&quot;</span>, f, insert);<br></code></pre></td></tr></table></figure><p>接下来为switch所需要的变量switchVar分配内存，并产生两个新BasicBlock，loopEntry和loopEnd。在loopEntry中通过switch结构来判断接下来执行哪个BasicBlock，所有的BasicBlock最后都会将switchVar的值修改为再下一个BasicBlock对应的值，并且跳转到loopEnd，再由loopEnd重新回到loopEntry。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// Create switch instruction itself and set condition</span><br>    switchI = SwitchInst::<span class="hljs-built_in">Create</span>(&amp;*(f-&gt;<span class="hljs-built_in">begin</span>()), swDefault, <span class="hljs-number">0</span>, loopEntry);<br>    switchI-&gt;<span class="hljs-built_in">setCondition</span>(load);<br><br>    <span class="hljs-comment">// Remove branch jump from 1st BB and make a jump to the while</span><br>    f-&gt;<span class="hljs-built_in">begin</span>()-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">eraseFromParent</span>();<br><br>    BranchInst::<span class="hljs-built_in">Create</span>(loopEntry, &amp;*(f-&gt;<span class="hljs-built_in">begin</span>()));<br><br>    <span class="hljs-comment">// Put all BB in the switch</span><br>    <span class="hljs-keyword">for</span> (vector&lt;BasicBlock *&gt;::iterator b = origBB.<span class="hljs-built_in">begin</span>(); b != origBB.<span class="hljs-built_in">end</span>();<br>         ++b) &#123;<br>        BasicBlock *i = *b;<br>        ConstantInt *numCase = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-comment">// Move the BB inside the switch (only visual, no code logic)</span><br>        i-&gt;<span class="hljs-built_in">moveBefore</span>(loopEnd);<br><br>        <span class="hljs-comment">// Add case to switch</span><br>        numCase = cast&lt;ConstantInt&gt;(ConstantInt::<span class="hljs-built_in">get</span>(<br>                switchI-&gt;<span class="hljs-built_in">getCondition</span>()-&gt;<span class="hljs-built_in">getType</span>(),<br>                llvm::cryptoutils-&gt;<span class="hljs-built_in">scramble32</span>(switchI-&gt;<span class="hljs-built_in">getNumCases</span>(), scrambling_key)));<br>        switchI-&gt;<span class="hljs-built_in">addCase</span>(numCase, i);<br>    &#125;<br></code></pre></td></tr></table></figure><p>生成新的switch结构，并且将origBB中的BasicBlock一一放入其中，每个BasicBlock所需要的switchVar则随机生成。</p><p>接下来就是对每个BasicBlock的尾巴部分进行修改，这里要分两种情况</p><p>第一种是无条件跳转，也就是上一个BasicBlock会直接跳转到下一个BasicBlock，或者说是它只有一个后继节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// If it&#x27;s a non-conditional jump</span><br>       <span class="hljs-keyword">if</span> (i-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">getNumSuccessors</span>() == <span class="hljs-number">1</span>) &#123;<br>           <span class="hljs-comment">// Get successor and delete terminator</span><br>           BasicBlock *succ = i-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">getSuccessor</span>(<span class="hljs-number">0</span>);<br>           i-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">eraseFromParent</span>();<br><br>           <span class="hljs-comment">// Get next case</span><br>           numCase = switchI-&gt;<span class="hljs-built_in">findCaseDest</span>(succ);<br><br>           <span class="hljs-comment">// If next case == default case (switchDefault)</span><br>           <span class="hljs-keyword">if</span> (numCase == <span class="hljs-literal">NULL</span>) &#123;<br>               numCase = cast&lt;ConstantInt&gt;(<br>                       ConstantInt::<span class="hljs-built_in">get</span>(switchI-&gt;<span class="hljs-built_in">getCondition</span>()-&gt;<span class="hljs-built_in">getType</span>(),<br>                                        llvm::cryptoutils-&gt;<span class="hljs-built_in">scramble32</span>(<br>                                                switchI-&gt;<span class="hljs-built_in">getNumCases</span>() - <span class="hljs-number">1</span>, scrambling_key)));<br>           &#125;<br><br>           <span class="hljs-comment">// Update switchVar and jump to the end of loop</span><br>           <span class="hljs-keyword">new</span> <span class="hljs-built_in">StoreInst</span>(numCase, load-&gt;<span class="hljs-built_in">getPointerOperand</span>(), i);<br>           BranchInst::<span class="hljs-built_in">Create</span>(loopEnd, i);<br>           <span class="hljs-keyword">continue</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p>这种情况比较好办。我们只需要给switchVar赋后继BasicBlock的case number，然后将br loopEnd添加到结尾就好。</p><p>第二种情况是有条件跳转，也就是该BasicBlock有多个后继节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// If it&#x27;s a conditional jump</span><br>        <span class="hljs-keyword">if</span> (i-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">getNumSuccessors</span>() == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-comment">// Get next cases</span><br>            ConstantInt *numCaseTrue =<br>                    switchI-&gt;<span class="hljs-built_in">findCaseDest</span>(i-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">getSuccessor</span>(<span class="hljs-number">0</span>));<br>            ConstantInt *numCaseFalse =<br>                    switchI-&gt;<span class="hljs-built_in">findCaseDest</span>(i-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">getSuccessor</span>(<span class="hljs-number">1</span>));<br><br>            <span class="hljs-comment">// Check if next case == default case (switchDefault)</span><br>            <span class="hljs-keyword">if</span> (numCaseTrue == <span class="hljs-literal">NULL</span>) &#123;<br>                numCaseTrue = cast&lt;ConstantInt&gt;(<br>                        ConstantInt::<span class="hljs-built_in">get</span>(switchI-&gt;<span class="hljs-built_in">getCondition</span>()-&gt;<span class="hljs-built_in">getType</span>(),<br>                                         llvm::cryptoutils-&gt;<span class="hljs-built_in">scramble32</span>(<br>                                                 switchI-&gt;<span class="hljs-built_in">getNumCases</span>() - <span class="hljs-number">1</span>, scrambling_key)));<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (numCaseFalse == <span class="hljs-literal">NULL</span>) &#123;<br>                numCaseFalse = cast&lt;ConstantInt&gt;(<br>                        ConstantInt::<span class="hljs-built_in">get</span>(switchI-&gt;<span class="hljs-built_in">getCondition</span>()-&gt;<span class="hljs-built_in">getType</span>(),<br>                                         llvm::cryptoutils-&gt;<span class="hljs-built_in">scramble32</span>(<br>                                                 switchI-&gt;<span class="hljs-built_in">getNumCases</span>() - <span class="hljs-number">1</span>, scrambling_key)));<br>            &#125;<br><br>            <span class="hljs-comment">// Create a SelectInst</span><br>            BranchInst *br = cast&lt;BranchInst&gt;(i-&gt;<span class="hljs-built_in">getTerminator</span>());<br>            SelectInst *sel =<br>                    SelectInst::<span class="hljs-built_in">Create</span>(br-&gt;<span class="hljs-built_in">getCondition</span>(), numCaseTrue, numCaseFalse, <span class="hljs-string">&quot;&quot;</span>,<br>                                       i-&gt;<span class="hljs-built_in">getTerminator</span>());<br><br>            <span class="hljs-comment">// Erase terminator</span><br>            i-&gt;<span class="hljs-built_in">getTerminator</span>()-&gt;<span class="hljs-built_in">eraseFromParent</span>();<br><br>            <span class="hljs-comment">// Update switchVar and jump to the end of loop</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">StoreInst</span>(sel, load-&gt;<span class="hljs-built_in">getPointerOperand</span>(), i);<br>            BranchInst::<span class="hljs-built_in">Create</span>(loopEnd, i);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>这里就需要将switchVar的case number赋值改为选择性的select指令。</p><p>基本整个流程都遵循了上一篇我们所讲到的控制流扁平化算法。但是这里我们仍然可以看出一些问题。比如对于一些较大的block，混淆过后仍然是巨大的一整块</p><p>混淆前</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; &lt;label&gt;:35:                                     ; preds = %30, %0</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>** <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">8</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%36</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%37</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%38</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%36</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%37</span><br>  <span class="hljs-variable">%39</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%40</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">xor</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%39</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%38</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%40</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%41</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%42</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%43</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%41</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%42</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%43</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%44</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%45</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%44</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%45</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%46</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%47</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%48</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%46</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%47</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%48</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>混淆后</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; &lt;label&gt;:36:                                     ; preds = %loopEntry</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>** <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">8</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%37</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%38</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%39</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%37</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%38</span><br>  <span class="hljs-variable">%40</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%41</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">xor</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%40</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%39</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%41</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%42</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%43</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%44</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%42</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%43</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%44</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%45</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%46</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%45</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%46</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%47</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%48</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%49</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%47</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%48</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%49</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>如果被混淆的代码大多数都是这种大块大块的顺序语句的话，那混淆的意义就不是很明显。所以对于这种大块，我们需要把他们切割成小块。</p><p>可以添加如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::vector&lt;BasicBlock *&gt; needSplite;<br>   <span class="hljs-keyword">unsigned</span> instSum = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span> ( Function::iterator I = std::<span class="hljs-built_in">next</span>(f-&gt;<span class="hljs-built_in">begin</span>()); I != f-&gt;<span class="hljs-built_in">end</span>(); I++ ) &#123;<br>       instSum += I-&gt;<span class="hljs-built_in">size</span>();<br>   &#125;<br>   <span class="hljs-keyword">for</span> ( Function::iterator I = std::<span class="hljs-built_in">next</span>(f-&gt;<span class="hljs-built_in">begin</span>()); I != f-&gt;<span class="hljs-built_in">end</span>(); I++ ) &#123;<br>       <span class="hljs-keyword">if</span> ( I-&gt;<span class="hljs-built_in">size</span>() &gt; instSum / f-&gt;<span class="hljs-built_in">size</span>() ) &#123;<br>           needSplite.<span class="hljs-built_in">push_back</span>(&amp;*I);<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">auto</span> I = needSplite.<span class="hljs-built_in">begin</span>(); I != needSplite.<span class="hljs-built_in">end</span>(); I++ ) &#123;<br>       BasicBlock::iterator j = (*I)-&gt;<span class="hljs-built_in">begin</span>();<br>       <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">unsigned</span> step = <span class="hljs-number">0</span>; step &lt; (*I)-&gt;<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; step++ ) &#123;<br>           j++;<br>       &#125;<br>       BasicBlock *next = (*I)-&gt;<span class="hljs-built_in">splitBasicBlock</span>(j);<br>   &#125;<br></code></pre></td></tr></table></figure><p>首先计算下所有BasicBlock包含指令的数量，对与指令数量大于平均值的，我们对它进行split。</p><p>实现对于大块的切割后我们还可以在添加虚假的控制流结构，来增加混淆的复杂性。</p><p>将上面第三个for循环的内容稍微更改一下，就可以变成一个非常简陋版本的虚假控制流。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">auto</span> I = needSplite.<span class="hljs-built_in">begin</span>(); I != needSplite.<span class="hljs-built_in">end</span>(); I++ ) &#123;<br>        <span class="hljs-comment">//std::string tw = &quot;split_&quot; + std::to_string(++index);</span><br>        BasicBlock::iterator j = (*I)-&gt;<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">unsigned</span> step = <span class="hljs-number">0</span>; step &lt; (*I)-&gt;<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; step++ ) &#123;<br>            j++;<br>        &#125;<br>        BasicBlock *next = (*I)-&gt;<span class="hljs-built_in">splitBasicBlock</span>(j<span class="hljs-comment">/*, tw*/</span>);<br><br>        Instruction *back = &amp;(*I)-&gt;<span class="hljs-built_in">back</span>();<br>        <span class="hljs-keyword">if</span> ( isa&lt;BranchInst&gt;(back) ) &#123;<br>            BranchInst *BI = dyn_cast&lt;BranchInst&gt;(back);<br>            BI-&gt;<span class="hljs-built_in">eraseFromParent</span>();<br>            AllocaInst *tmpBool = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AllocaInst</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(f-&gt;<span class="hljs-built_in">getContext</span>()), <span class="hljs-number">0</span>, <span class="hljs-string">&quot;tmp&quot;</span>, *I);<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">StoreInst</span>(<br>                    ConstantInt::<span class="hljs-built_in">get</span>(Type::<span class="hljs-built_in">getInt32Ty</span>(f-&gt;<span class="hljs-built_in">getContext</span>()), <span class="hljs-number">1</span>), tmpBool, *I);<br>            LoadInst *loadInst = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LoadInst</span>(tmpBool, <span class="hljs-string">&quot;tmp&quot;</span>, *I);<br>            ICmpInst *ICmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ICmpInst</span>(**I, ICmpInst::ICMP_EQ, loadInst, loadInst);<br>            BranchInst::<span class="hljs-built_in">Create</span>(next, (*I)-&gt;<span class="hljs-built_in">getPrevNode</span>(), ICmp, *I);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我们将原本BasicBlock末尾的br指令删除，换成一个icmp+br的形式，只需要将保证每次跳转都能跳转到正确的block上，就可以了。</p><p>进化后的block变成如下情况</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; &lt;label&gt;:39:                                     ; preds = %loopEntry</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>** <span class="hljs-variable">%8</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">8</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%40</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%41</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%42</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%40</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%41</span><br>  <span class="hljs-variable">%43</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%44</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">xor</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%43</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%42</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%44</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%45</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%45</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem9</span><br>  <span class="hljs-variable">%46</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%46</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem11</span><br>  <span class="hljs-variable">%tmp2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%tmp2</span><br>  <span class="hljs-variable">%tmp3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%tmp2</span><br>  <span class="hljs-variable">%47</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">icmp</span> <span class="hljs-keyword">eq</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%tmp3</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%tmp3</span><br>  <span class="hljs-variable">%48</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">select</span> <span class="hljs-type">i1</span> <span class="hljs-variable">%47</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">1569018260</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">-2145809682</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%48</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%switchVar</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%loopEnd</span><br><br><span class="hljs-comment">; &lt;label&gt;:49:                                     ; preds = %loopEntry</span><br>  <span class="hljs-variable">%.reload10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem9</span><br>  <span class="hljs-variable">%.reload12</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%.reg2mem11</span><br>  <span class="hljs-variable">%50</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%.reload10</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%.reload12</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%50</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%51</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%52</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">nsw</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%51</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%52</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%53</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%54</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%55</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">or</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%53</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%54</span><br>  <span class="hljs-keyword">store</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%55</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%2</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>上述的修改全部保存到github中 <a href="https://github.com/penguin-wwy/Armariris.git">https://github.com/penguin-wwy/Armariris.git</a></p><p>clone到本地，checkout到dev_0分支即可查看，可直接编译运行、调试。</p>]]></content>
    
    
    <categories>
      
      <category>代码混淆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLVM</tag>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++类型转化表达式总结</title>
    <link href="/2017/09/16/C++_type_cast/"/>
    <url>/2017/09/16/C++_type_cast/</url>
    
    <content type="html"><![CDATA[<h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h3><p>根据 <a href="http://www.cplusplus.com/">http://www.cplusplus.com</a> 的说法，const_cast用于对象指针或引用的const的添加和删除操作</p><p>例子如下：</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// const_cast</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> * str)</span></span><br><span class="hljs-function"></span>&#123;<br>  cout &lt;&lt; str &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * c = <span class="hljs-string">&quot;sample text&quot;</span>;<br>  <span class="hljs-built_in">print</span> ( <span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-keyword">char</span> *&gt; (c) );<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出为</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sample <span class="hljs-built_in">text</span><br></code></pre></td></tr></table></figure><p><a href="http://en.cppreference.com/">http://en.cppreference.com</a> 上有更多的信息</p><p>函数指针和成员函数指针不可用于const_cast</p><p>const_cast可以使实际指代const对象的到非const类型的引用或指针，但是通过非const访问路径修改const对象则是未定义行为。</p><p>更详细的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">type</span> &#123;</span><br>    <span class="hljs-built_in">type</span>() :<span class="hljs-built_in">i</span>(<span class="hljs-number">3</span>) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-comment">// this-&gt;i = v;                 // 编译错误：这是指向 const 的指针</span><br>        <span class="hljs-keyword">const_cast</span>&lt;type*&gt;(<span class="hljs-keyword">this</span>)-&gt;i = v; <span class="hljs-comment">// 只要对象不是 const 就 OK</span><br>    &#125;<br>    <span class="hljs-keyword">int</span> i;<br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>;                    <span class="hljs-comment">// i 不声明为 const</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; cref_i = i; <br>    <span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-keyword">int</span>&amp;&gt;(cref_i) = <span class="hljs-number">4</span>; <span class="hljs-comment">// OK ：修改 i</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br> <br>    type t; <span class="hljs-comment">// note, if this is const type t;, then t.m1(4); is UB</span><br>    t.<span class="hljs-built_in">m1</span>(<span class="hljs-number">4</span>);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;type::i = &quot;</span> &lt;&lt; t.i &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br> <br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> j = <span class="hljs-number">3</span>; <span class="hljs-comment">// j 声明为 const</span><br>    <span class="hljs-keyword">int</span>* pj = <span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-keyword">int</span>*&gt;(&amp;j);<br>    <span class="hljs-comment">// *pj = 4;         // 未定义行为！</span><br> <br>    <span class="hljs-built_in"><span class="hljs-keyword">void</span></span> (type::*mfp)(<span class="hljs-keyword">int</span>) <span class="hljs-keyword">const</span> = &amp;type::m1; <span class="hljs-comment">// 指向成员函数指针</span><br><span class="hljs-comment">//  const_cast&lt;void(type::*)(int)&gt;(mfp); // 编译错误： const_cast 对函数指针不起作用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">i</span> = <span class="hljs-number">4</span><br><span class="hljs-attribute">type</span>::i = <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><p>reinterpret_cast可以在任意类型指针进行转换，哪怕是不相关的类型。</p><p>还可用于指针或引用与整型的相互转化，不单是int，还包括short、long等整数类型。</p><p>原因在于reinterpret_cast是“simple binary copy”，cplusplus的原话是“The operation result is a simple binary copy of the value from one pointer to the other. All pointer conversions are allowed: neither the content pointed nor the pointer type itself is checked.”</p><p>经过测试，整型与char *之间的转化也可以正常进行</p><p>cppreference的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">42</span>; &#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">7</span>;<br> <br>    <span class="hljs-comment">// 指针到整数并转回</span><br>    <span class="hljs-keyword">uintptr_t</span> v1 = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">uintptr_t</span>&gt;(&amp;i); <span class="hljs-comment">// static_cast 为错误</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;The value of &amp;i is 0x&quot;</span> &lt;&lt; std::hex &lt;&lt; v1 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">int</span>* p1 = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">int</span>*&gt;(v1);<br>    <span class="hljs-built_in">assert</span>(p1 == &amp;i);<br> <br>    <span class="hljs-comment">// 到另一函数指针并转回</span><br>    <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(*fp1)() = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-built_in"><span class="hljs-keyword">void</span></span>(*)()&gt;(f);<br>    <span class="hljs-comment">// fp1(); 未定义行为</span><br>    <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(*fp2)() = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(*)()&gt;(fp1);<br>    std::cout &lt;&lt; std::dec &lt;&lt; <span class="hljs-built_in">fp2</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>; <span class="hljs-comment">// 安全</span><br> <br>    <span class="hljs-comment">// 通过指针的类型别名使用</span><br>    <span class="hljs-keyword">char</span>* p2 = <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">char</span>*&gt;(&amp;i);<br>    <span class="hljs-keyword">if</span>(p2[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\x7&#x27;</span>)<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;This system is little-endian\n&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;This system is big-endian\n&quot;</span>;<br> <br>    <span class="hljs-comment">// 通过引用的类型别名使用</span><br>    <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&amp;&gt;(i) = <span class="hljs-number">42</span>;<br>    std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br> <br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;const_iref = i;<br>    <span class="hljs-comment">// int &amp;iref = reinterpret_cast&lt;int&amp;&gt;(const_iref); // 编译错误——不能去除 const</span><br>    <span class="hljs-comment">// 必须用 const_cast 代替： int &amp;iref = const_cast&lt;int&amp;&gt;(const_iref);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">The</span> value of &amp;i is <span class="hljs-number">0</span>x<span class="hljs-number">7</span>fff<span class="hljs-number">352</span>c<span class="hljs-number">3580</span><br><span class="hljs-attribute">42</span><br><span class="hljs-attribute">This</span> system is little-endian<br><span class="hljs-attribute">42</span><br></code></pre></td></tr></table></figure><h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><p>static_cast可以在有联系的类型之间进行指针转换（between pointers to related classes），不但包括派生类转换基类，也包括基类转换派生类。</p><p>static_cast还可以完成以下两种</p><p>Convert from void* to any pointer type.可以有void *到任何类型</p><p>Convert integers, floating-point values and enum types to enum types.由整数、浮点、枚举值到枚举值</p><p>此外</p><p>Explicitly call a single-argument constructor or a conversion operator. 调用单一参数的构造函数或转换的重载符号</p><p>Convert to rvalue references. （由左值）转化成右值的引用</p><p>Convert enum class values into integers or floating-point values. 枚举类转化为整数、浮点数</p><p>Convert any type to void, evaluating and discarding the value. 任意类型到void，求值后舍弃该值</p><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">B</span> &#123;</span><br>    <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Hello world, this is B!\n&quot;</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">D</span> :</span> B &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Hello world, this is D!\n&quot;</span>;<br>    &#125;<br>&#125;;<br> <br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">E</span> &#123;</span> ONE = <span class="hljs-number">1</span>, TWO, THREE &#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">EU</span> &#123;</span> ONE = <span class="hljs-number">1</span>, TWO, THREE &#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 1: 初始化转换</span><br>    <span class="hljs-keyword">int</span> n = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-number">3.14</span>); <br>    std::cout &lt;&lt; <span class="hljs-string">&quot;n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    std::vector&lt;<span class="hljs-keyword">int</span>&gt; v = <span class="hljs-keyword">static_cast</span>&lt;std::vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;(<span class="hljs-number">10</span>);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;v.size() = &quot;</span> &lt;&lt; v.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br> <br>    <span class="hljs-comment">// 2: 静态向下转型</span><br>    D d;<br>    B&amp; br = d; <span class="hljs-comment">// 通过隐式转换向上转型</span><br>    br.<span class="hljs-built_in">hello</span>();<br>    D&amp; another_d = <span class="hljs-keyword">static_cast</span>&lt;D&amp;&gt;(br); <span class="hljs-comment">// 向下转型</span><br>    another_d.<span class="hljs-built_in">hello</span>();<br> <br>    <span class="hljs-comment">// 3: 左值到亡值</span><br>    std::vector&lt;<span class="hljs-keyword">int</span>&gt; v2 = <span class="hljs-keyword">static_cast</span>&lt;std::vector&lt;<span class="hljs-keyword">int</span>&gt;&amp;&amp;&gt;(v);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;after move, v.size() = &quot;</span> &lt;&lt; v.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br> <br>    <span class="hljs-comment">// 4: 弃值表达式</span><br>    <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">void</span>&gt;(v2.<span class="hljs-built_in">size</span>());<br> <br>    <span class="hljs-comment">// 5. 隐式转换的逆</span><br>    <span class="hljs-keyword">void</span>* nv = &amp;n;<br>    <span class="hljs-keyword">int</span>* ni = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">int</span>*&gt;(nv);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;*ni = &quot;</span> &lt;&lt; *ni &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br> <br>    <span class="hljs-comment">// 6. 数组到指针后随向上转型</span><br>    D a[<span class="hljs-number">10</span>];<br>    B* dp = <span class="hljs-keyword">static_cast</span>&lt;B*&gt;(a);<br> <br>    <span class="hljs-comment">// 7. 有作用域枚举到 int 或 float</span><br>    E e = E::ONE;<br>    <span class="hljs-keyword">int</span> one = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">int</span>&gt;(e);<br>    std::cout &lt;&lt; one &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br> <br>    <span class="hljs-comment">// 8. int 到枚举，枚举到另一枚举</span><br>    E e2 = <span class="hljs-keyword">static_cast</span>&lt;E&gt;(one);<br>    EU eu = <span class="hljs-keyword">static_cast</span>&lt;EU&gt;(e2);<br> <br>    <span class="hljs-comment">// 9. 指向成员指针向上转型</span><br>    <span class="hljs-keyword">int</span> D::*pm = &amp;D::m;<br>    std::cout &lt;&lt; br.*<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">int</span> B::*&gt;(pm) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br> <br>    <span class="hljs-comment">// 10. void* 到任何类型</span><br>    <span class="hljs-keyword">void</span>* voidp = &amp;e;<br>    std::vector&lt;<span class="hljs-keyword">int</span>&gt;* p = <span class="hljs-keyword">static_cast</span>&lt;std::vector&lt;<span class="hljs-keyword">int</span>&gt;*&gt;(voidp);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">n = <span class="hljs-number">3</span><br>v.size() = <span class="hljs-number">10</span><br>Hello world, <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> B!<br>Hello world, <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> D!<br>after move, v.size() = <span class="hljs-number">0</span><br>*ni = <span class="hljs-number">3</span><br><span class="hljs-number">1</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><p>dynamic_cast只能用于类或者void *的指针、引用转换，同时必须为多态以使用运行时检查的</p><p>例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">V</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>&#123;&#125;;  <span class="hljs-comment">// 必须为多态以使用运行时检查的 dynamic_cast</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span> :</span> <span class="hljs-keyword">virtual</span> V &#123;&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">B</span> :</span> <span class="hljs-keyword">virtual</span> V &#123;<br>  <span class="hljs-built_in">B</span>(V* v, A* a) &#123;<br>    <span class="hljs-comment">// 构造中转型（见后述 D 的构造函数中的调用）</span><br>    <span class="hljs-keyword">dynamic_cast</span>&lt;B*&gt;(v); <span class="hljs-comment">// 良好定义： v 有类型 V* ， B 的 V 基类，产生 B*</span><br>    <span class="hljs-keyword">dynamic_cast</span>&lt;B*&gt;(a); <span class="hljs-comment">// 未定义行为： a 有类型 A* ， A 非 B 的基类</span><br>  &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">D</span> :</span> A, B &#123;<br>    <span class="hljs-built_in">D</span>() : <span class="hljs-built_in">B</span>((A*)<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>) &#123; &#125;<br>&#125;;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span> &#123;</span><br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Base</span>() &#123;&#125;<br>&#125;;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Derived</span>:</span> Base &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    D d; <span class="hljs-comment">// 最终导出类</span><br>    A&amp; a = d; <span class="hljs-comment">// 向上转型，可以用 dynamic_cast ，但不必须</span><br>    D&amp; new_d = <span class="hljs-keyword">dynamic_cast</span>&lt;D&amp;&gt;(a); <span class="hljs-comment">// 向下转型</span><br>    B&amp; new_b = <span class="hljs-keyword">dynamic_cast</span>&lt;B&amp;&gt;(a); <span class="hljs-comment">// 侧向转型</span><br> <br> <br>    Base* b1 = <span class="hljs-keyword">new</span> Base;<br>    <span class="hljs-keyword">if</span>(Derived* d = <span class="hljs-keyword">dynamic_cast</span>&lt;Derived*&gt;(b1))<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;downcast from b1 to d successful\n&quot;</span>;<br>        d-&gt;<span class="hljs-built_in">name</span>(); <span class="hljs-comment">// 调用安全</span><br>    &#125;<br> <br>    Base* b2 = <span class="hljs-keyword">new</span> Derived;<br>    <span class="hljs-keyword">if</span>(Derived* d = <span class="hljs-keyword">dynamic_cast</span>&lt;Derived*&gt;(b2))<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;downcast from b2 to d successful\n&quot;</span>;<br>        d-&gt;<span class="hljs-built_in">name</span>(); <span class="hljs-comment">// 调用安全</span><br>    &#125;<br> <br>    <span class="hljs-keyword">delete</span> b1;<br>    <span class="hljs-keyword">delete</span> b2;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">downcast <span class="hljs-keyword">from</span> b2 <span class="hljs-keyword">to</span> d successful<br></code></pre></td></tr></table></figure><p>dynamic_cast与static_cast在类转换上的不同在于，dynamic_cast会确保转化成功，在转化不成功时会设置为NULL，如上例中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Derived* d = <span class="hljs-keyword">dynamic_cast</span>&lt;Derived*&gt;(b1)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码混淆——控制流扁平定义与算法</title>
    <link href="/2017/06/07/code-obf1/"/>
    <url>/2017/06/07/code-obf1/</url>
    
    <content type="html"><![CDATA[<h3 id="扁平化的定义"><a href="#扁平化的定义" class="headerlink" title="扁平化的定义"></a>扁平化的定义</h3><p>所谓控制流是指代码执行时指令的执行顺序。在各种控制逻辑的作用下，程序会沿着特定的逻辑顺序执行。一般控制逻辑包括有\无条件分支、循环、函数调用等。在正常情况下程序的逻辑非常好理解（代码逻辑不好的程序员都死了。。。）<span id="more"></span>，开发过程中有各种人为的行为使代码逻辑清晰，便于维护和扩展。但同时，对于逆向行为来说，清晰的代码逻辑会导致很容易抓住程序重点，加快破解速度。而控制流扁平则是反其道而行将源代码结构改变，使得程序的逻辑复杂不易被静态分析，增加逆向难度。</p><p>下面通过一个例子来说明<br>这是《软件加密与解密》中的示例代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">modexp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> x[], <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> R, L;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> s = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(k &lt; w) &#123;<br>        <span class="hljs-keyword">if</span> (x[k] == <span class="hljs-number">1</span>) &#123;<br>            R = (s * y) % n;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            R = s;<br>        &#125;<br>        s = R * R % n;<br>        L = R;<br>        k++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据上段代码，我们可以画出它的控制流图。</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/1.JPG"></p><p>这里我们用if来代替while，这样可以使得逻辑更加清晰。这幅图就是扁平前的效果，可以看到程序基本是从上往下执行的，逻辑线路非常明确。<br>而当我们对它进行了扁平化处理之后，就变成这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">modexp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> x[], <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> R, L, s, k;<br>    <span class="hljs-keyword">int</span> next = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;;) &#123;<br>        <span class="hljs-keyword">switch</span>(next) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: k = <span class="hljs-number">0</span>; s = <span class="hljs-number">1</span>; next = <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">if</span>(k&lt;w) next = <span class="hljs-number">2</span>; <span class="hljs-keyword">else</span> next = <span class="hljs-number">6</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">if</span>(x[k]==<span class="hljs-number">1</span>) next = <span class="hljs-number">3</span>; <span class="hljs-keyword">else</span> next = <span class="hljs-number">4</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: R=(s * y) % n; next = <span class="hljs-number">5</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: R = s; next = <span class="hljs-number">5</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: s=R * R % n; L = R; k++; next = <span class="hljs-number">1</span>; <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-keyword">return</span> L;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制流图变成了这样</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/2.JPG"></p><p>直观的感觉就是代码变“扁”了，所有的代码都挤到了一层当中，这样做的好处在于在反汇编、反编译静态分析的时候，无法判断哪些代码先执行哪些后执行，必须要通过动态运行才能记录执行顺序，从而加重了分析的负担。</p><h3 id="实现平台"><a href="#实现平台" class="headerlink" title="实现平台"></a>实现平台</h3><p>扁平化的实现是不能平地而起的，必须要基于一定的平台。就是说，不是你随便给我一段代码，让我混淆我就能混。之前的例子很简单，遇到复杂一点的比如while循环里有声明局部变量，while内部的if和else分支都用到这个变量；当混淆后，while循环已经被我们用if改写了，那这个局部变量的声明放到哪里？如果放到替代while的if分支里，由于这个if分支和原来while内部的if-else分支是平级的，那么这个局部变量就不能在if-else分支中使用了。这就是一个bug。所以在混淆前必须对源代码进行分析。</p><p>那用什么东西进行分析呢？答案是编译器，更准确说是编译（解释）器的前端。</p><p>这里要重温一下很有趣的编译原理。以编译语言来讲，从源代码到可执行程序要经历这么几步：预编译——&gt;编译——&gt;汇编——&gt;链接。以GCC来说，预编译对应-E参数，将源代码所有的宏处理展开，包括include头文件。编译则是将预处理完的文件通过词法分析、语法分析等前端处理，生成抽象语法书并转化为中间语言，然后进入编译器后端执行优化策略，输出为汇编语言，对应的GCC参数为-S。汇编是将汇编语言（低级程序语言）转化成对应的可执行的机器码。链接则将生成的多个模块（也可能是一个）间互相引用的部分处理好，让不同的模块可以相互调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">//预编译<br>gcc -E test.c -o test.i    <br>//编译 <br>gcc -S test.i -o test.s     <br>//汇编<br>gcc -c test.s -o test.o     <br>//链接<br>ld -static test1.o test2.o tes3.o -start-group -lgcc -lgcc_eh -lc -end-group crtend.o crtn.o<br></code></pre></td></tr></table></figure><p>我们平常所说的编译器GCC其实是一套编译体系，包括了编译器、汇编器、链接器，狭义上的编译器只处理从源代码到汇编语言的过程。下文所述的编译器均是狭义上的编译器，不指编译体系。</p><p>对于编译器以中间语言为界限分为前端和后端。前端进行词法分析、语法分析、中间语言生成，后端负责优化。我们所需要的就是词法和语法分析。</p><p>词法分析就是将源代码切割成一个一个的单词。语法分析就是研究源代码的逻辑了。由于篇幅限制（已经很啰嗦了，不过似乎并不能讲清楚），这里就不详细描述了，总之就是经过语法分析，编译器前段会得到抽象语法树，并且获得控制流图，也就是我们之前画的那种。有了控制流图才能在其基础上进行修改，所以一般需要都是采用魔改编译器的方式来完成代码混淆。</p><p>要魔改，编译器最好是开源的，扩展性要好，所以一般都采用clang作为基础。clang是一个由C++编写、基于LLVM编译体系的C/C++/OC编译器。文档链接<a href="http://clang.llvm.org/docs/index.html%E3%80%82">http://clang.llvm.org/docs/index.html。</a></p><h3 id="算法抽象"><a href="#算法抽象" class="headerlink" title="算法抽象"></a>算法抽象</h3><p>在知晓了平台之后我们就可以开始研究如何进行控制流扁平。一般扁平算法基本步骤如下：</p><p>1、将函数体拆分为多个基本块，构建控制流图。将这些原本属于不同层级的基本块放到同一层级；</p><p>2、将所有基本块封装到一个switch选择分支当中；</p><p>3、用一个状态变量来表示当前状态，进行逻辑顺序控制（上述代码中的next变量）。</p><p>改变原有结构往往会带来一些副作用，比如之前所说的局部变量的声明要提前，否则不同分支无法使用同一个变量。除此之外的副作用还有：</p><p>1、由于声明提前，声明和赋值过程分离，而引用类型需要声明的同时定义，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>（k&lt;m） &#123;<br>    <span class="hljs-keyword">int</span>&amp; a = k;     <span class="hljs-comment">//引用需同时声明和定义</span><br>    <span class="hljs-keyword">if</span>(...) &#123;<br>        a += ...<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        a -= ...<br>    &#125;<br>    ...<br>&#125;<br> <br><span class="hljs-comment">//混淆后变以下</span><br> <br><span class="hljs-keyword">int</span> &amp;a;             <span class="hljs-comment">//错误</span><br><span class="hljs-keyword">switch</span>(next) &#123;<br><span class="hljs-keyword">case</span> ...:   <span class="hljs-keyword">if</span> (k&lt;m) a = k;<br>...<br><span class="hljs-keyword">case</span> ...:   <span class="hljs-keyword">if</span>(...) a+=...;<span class="hljs-keyword">else</span> a-=...;next=...;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>2、构造函数和析构函数会因为声明位置而产生副作用。</p><p>3、带来同名变量的问题，即原本不同作用域名称相同的变量变成同作用域名称相同的变量。</p><p>4、try-catch语句可能会遇到的执行顺序问题。</p><p>除了要处理这些副作用之外，源代码中本来的while、do-while、for循环包括原本的switch-case分支统统需要改为if-goto的形式。然后再进行switch-case的封装。</p><p>最终的算法执行顺序为</p><p>标识符重命名（解决变量名冲突）——&gt;控制语句展开（全变成if）——&gt;变量声明提前——&gt;控制流压扁</p><h4 id="标识符重命名"><a href="#标识符重命名" class="headerlink" title="标识符重命名"></a>标识符重命名</h4><p>这个目的很明显就是为了解决变量名冲突，所以按照一定顺序改就行了。</p><h4 id="控制语句展开"><a href="#控制语句展开" class="headerlink" title="控制语句展开"></a>控制语句展开</h4><p>目的是将逻辑控制全变成if-goto逻辑，类似于下图</p><p><img src="https://sz-1254760981.cos.ap-chengdu.myqcloud.com/3.JPG">{:height=”50%” width=”50%”}</p><h4 id="变量声明提前"><a href="#变量声明提前" class="headerlink" title="变量声明提前"></a>变量声明提前</h4><p>针对基本类型和指针类型按以下步骤执行：</p><p>(1)将声明提前</p><p>(2)如果原来有初始化行为，则在原来的位置增加赋值语句，用初始化值赋值</p><p>(3)如果没有初始化行为则赋值为0</p><p>引用变量需要变为指针变量按上述步骤执行。</p><p>针对对象的构造和析构按照以下步骤执行：</p><p>(1)在起始处用auto_ptr分配一段对象大小的内存</p><p>(2)在原来初始化的位置用placement new语句对auto_ptr的内存进行初始化</p><p>(3)原始代码中引用对象的位置改为auto_ptr解引用</p><p>(4)在隐式析构的位置显示调用析构函数</p><h4 id="控制流压扁"><a href="#控制流压扁" class="headerlink" title="控制流压扁"></a>控制流压扁</h4><p>最后是控制流压扁的伪代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">对函数有控制流图cfg<br>入口节点为entry<br>出口节点为<span class="hljs-keyword">exit</span><br>count = <span class="hljs-number">0</span><br>构造一个switch，和控制值nextVar<br>foreach node <span class="hljs-keyword">in</span> cfg：<br>    <span class="hljs-keyword">if</span> node != <span class="hljs-keyword">exit</span>：<br>        新建一个case，并包含node的全部内容<br>        若node有一个后继节点：<br>            nextVar = x<br>            x为后继节点的case<br>        若node有两个后继节点a1，a2：<br>            <span class="hljs-keyword">if</span> condition：<br>                nextVar = x<br>            <span class="hljs-keyword">else</span><br>                nextVar = y<br>            x为a1的case，y为a2的case<br>    增加一个<span class="hljs-keyword">break</span>;<br>将上述switch结构封装到一个死循环中<br></code></pre></td></tr></table></figure><p>PS：本文部分名词解释、图片来自一下资料：</p><p>《软件加密与解密》</p><p>张清泉的硕士论文《基于clang的C++代码混淆工具》</p><p>宋亚齐的硕士论文《基于代码混淆的软件保护技术研究》</p>]]></content>
    
    
    <categories>
      
      <category>代码混淆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
